/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

/**
 *
 * @author ms
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import konekcija.konekcija;
import model.PodaciODodatnojSluzbi;
import model.PodaciOPastoralnojSluzbi;
import model.PodaciOPrijaviIOsiguranju;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.asoft.library.AsoftComboBox;
import org.asoft.library.AsoftDate;
import org.asoft.library.picker.AsoftHistoryDatePicker;
import service.puniComboDrzavljanstvo;
import service.puniComboMaticni;
import service.puniComboNacionalnost;
import service.puniComboSvojstvoOsiguranika;
import service.puniComboPtt;

public class addPersonalTab extends javax.swing.JFrame {

    private Connection conn;
    private String akcija;
    private String mIzabraniId;
    ArrayList<PodaciOPastoralnojSluzbi> popsArray = new ArrayList<PodaciOPastoralnojSluzbi>();
    ArrayList<PodaciODodatnojSluzbi> podsArray = new ArrayList<PodaciODodatnojSluzbi>();
    ArrayList<PodaciOPrijaviIOsiguranju> popioArray = new ArrayList<PodaciOPrijaviIOsiguranju>();
    DefaultListModel DLM = new DefaultListModel();
    String sqlQuery11;
    private int mAktivan;
 

    /**
     * Creates new form addPersonal
     *
     * @param conn
     * @param akcija
     * @param mIzabraniId
     */
    public addPersonalTab(Connection conn, String akcija, String mIzabraniId) {
        this.akcija = akcija;
        this.mIzabraniId = mIzabraniId;
        this.conn = conn;

        initComponents();
//        jTabbedPane1.setBackgroundAt(0, Color.RED);
//        jTabbedPane1.setBackgroundAt(1, Color.GREEN);
//            jTabbedPane1.setForeground(Color.YELLOW);
//    jTabbedPane1.setBackground(Color.MAGENTA);
//    String label = "Tab Label";
//    jTabbedPane1.addTab(label, new JButton("Button"));
//
//    int index = jTabbedPane1.getTabCount() - 1;
//
//    jTabbedPane1.setForegroundAt(2, Color.ORANGE);
//    jTabbedPane1.setBackgroundAt(3, Color.GREEN);

//        try {
//            // setUIFont(new javax.swing.plaf.FontUIResource("Tahoma",Font.PLAIN,12));
////    setUIFont(new javax.swing.plaf.FontUIResource("Verdana",Font.PLAIN,14));
//        } catch (Exception e) {
//        }
        setLocationRelativeTo(null);
        setTitle("OSOBNI PODACI O SVEĆENICIMA");

        Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/i1.png"));
        setIconImage(image);
        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);

        if (conn == null) {
            konekcija n = new konekcija();
            conn = n.konekcija();
        }

        nuliranjeForme0();

        if (akcija.equalsIgnoreCase("IZMENA")) {
            AddBtn.setEnabled(false);
            if (!Prijava.getKosam()) {
                AddBtn.setEnabled(false);
                UpdateBtn.setEnabled(false);
            }
            try {
                napuniEkran(mIzabraniId);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
                JOptionPane.showMessageDialog(null, "Napuni ekran - greska", "Upozorenje", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (akcija.equalsIgnoreCase("UNOS")) {
            UpdateBtn.setEnabled(false);
             if (!Prijava.getKosam()) {
                AddBtn.setEnabled(false);
                UpdateBtn.setEnabled(false);
            }
//            nuliranjeForme();
        }
        mOslovljavanje.grabFocus();
    }

    public addPersonalTab() {
        JOptionPane.showMessageDialog(null, "Poziv konstruktora bez parametara ....");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        mId = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        mOslovljavanje = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        mCrkvenaTitula = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        mAkademskaTitula = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        mImeULicnojKarti = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        mPrezimeULicnojKarti = new javax.swing.JTextField();
        mIme = new javax.swing.JTextField();
        mPrezime = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        mJmbg = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        mDatumRodjenja = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel9 = new javax.swing.JLabel();
        mMestoRodjenja = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mImeOca = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        mImeMajke = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        mNacionalnost = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        mDrzavljanstvo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        mTelefon = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        mEmail = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        mZupaNaziv = new javax.swing.JComboBox();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        mBanka = new javax.swing.JComboBox();
        jLabel73 = new javax.swing.JLabel();
        mTekuciRacun = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        mTipEntiteta = new javax.swing.JComboBox();
        jPanel16 = new javax.swing.JPanel();
        AttachBtn = new javax.swing.JButton();
        mSlika = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mLabelSlika = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel75 = new javax.swing.JLabel();
        mUstanovaNaziv = new javax.swing.JComboBox();
        jLabel76 = new javax.swing.JLabel();
        mDatumPrestankaSluzbe = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel77 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        mSrednjeObrazovanjeMesto = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        mSrednjeObrazovanjeSkola = new javax.swing.JComboBox();
        jLabel61 = new javax.swing.JLabel();
        mSrednjeObrazovanjePeriodOd = new javax.swing.JTextField();
        mSrednjeObrazovanjePeriodDo = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        mBogoslovijaMesto = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        mBogoslovijaPeriodOd = new javax.swing.JTextField();
        mBogoslovijaPeriodDo = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        mBogoslovijaMesto1 = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        mBogoslovijaPeriodOd1 = new javax.swing.JTextField();
        mBogoslovijaPeriodDo1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        mBogoslovijaMesto2 = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        mBogoslovijaPeriodOd2 = new javax.swing.JTextField();
        mBogoslovijaPeriodDo2 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        mDjakonatMesto = new javax.swing.JComboBox();
        mDjakonatDatum = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        mDjakonatZareditelj = new javax.swing.JComboBox();
        jLabel50 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        mPrezbiteratMesto = new javax.swing.JComboBox();
        mPrezbiteratDatum = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        mPrezbiteratZareditelj = new javax.swing.JComboBox();
        jLabel54 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        mDodiplomskiStudijMesto = new javax.swing.JComboBox();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        mDodiplomskiStudijUstanova = new javax.swing.JComboBox();
        mDodiplomskiStudijPeriodDo = new javax.swing.JTextField();
        mDodiplomskiStudijPeriodOd = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        mMagisterijMesto = new javax.swing.JComboBox();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        mMagisterijNazivUstanove = new javax.swing.JComboBox();
        jLabel66 = new javax.swing.JLabel();
        mMagisterijPeriodOd = new javax.swing.JTextField();
        mMagisterijPeriodDo = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        mDoktoratMesto = new javax.swing.JComboBox();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        mDoktoratNazivUstanove = new javax.swing.JComboBox();
        jLabel67 = new javax.swing.JLabel();
        mDoktoratPeriodOd = new javax.swing.JTextField();
        mDoktoratPeriodDo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        mPOPSMestoSluzbe = new javax.swing.JComboBox();
        mPOPSNazivUstanove = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        mPOPSSvojstvo = new javax.swing.JComboBox();
        mPOPSDekret = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        mPOPSPocetakSluzbeOd = new org.asoft.library.picker.AsoftHistoryDatePicker();
        mPOPSTrajanjeSluzbeDo = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel21 = new javax.swing.JLabel();
        dodajPastoralnuSluzbuBtn = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        mPOPSNazivZupe = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListPodaciOPastoralnojSluzbi = new javax.swing.JList();
        obrisiPastoralnuSluzbuBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        mPODSMestoSluzbe = new javax.swing.JComboBox();
        mPODSNazivUstanove = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        mPODSSvojstvo = new javax.swing.JComboBox();
        mPODSDekret = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        mPODSPocetakSluzbeOd = new org.asoft.library.picker.AsoftHistoryDatePicker();
        mPODSTrajanjeSluzbeDo = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel45 = new javax.swing.JLabel();
        dodajDodatnuSluzbuBtn = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        mPODSNazivZupe = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ListPodaciODodatnojSluzbi = new javax.swing.JList();
        obrisiDodatnuSluzbuBtn = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        mPOPIOSvojstvoOsiguranika = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        mPOPIOPocetakOsiguranjaOd = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel23 = new javax.swing.JLabel();
        mPOPIOTrajanjeOsiguranjaDo = new org.asoft.library.picker.AsoftHistoryDatePicker();
        jLabel24 = new javax.swing.JLabel();
        mPOPIOMestoOsiguranika = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        dodajPodaciOPrijaviIOsiguranjuBtn = new javax.swing.JButton();
        mPOPIOOpstina = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListPodaciOPrijaviIOsiguranju = new javax.swing.JList();
        brisanjejPodaciOPrijaviIOsiguranjuBtn = new javax.swing.JButton();
        AddBtn = new javax.swing.JButton();
        OdustaniBtn = new javax.swing.JButton();
        UpdateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pregled svećenika");

        jTabbedPane1.setBackground(new java.awt.Color(0, 153, 204));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 153), new java.awt.Color(255, 51, 51)));
        jTabbedPane1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mId.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        mId.setEnabled(false);
        mId.setFocusable(false);

        jLabel14.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel14.setText("Id:");

        jLabel26.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel26.setText("Oslovljavanje:");

        mOslovljavanje.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel27.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel27.setText("Crkvena titula:");

        mCrkvenaTitula.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel28.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel28.setText("Akademska titula:");

        mAkademskaTitula.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAkademskaTitula, 0, 226, Short.MAX_VALUE)
                    .addComponent(mCrkvenaTitula, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mOslovljavanje, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mId))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(mId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mOslovljavanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mCrkvenaTitula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(mAkademskaTitula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel29.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel29.setText("Ime u LK:");

        mImeULicnojKarti.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setText("Ime:");

        mPrezimeULicnojKarti.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mIme.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPrezime.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel30.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel30.setText("Prezime u LK:");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("Prezime:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel2)
                    .addComponent(jLabel30)
                    .addComponent(jLabel3))
                .addGap(60, 60, 60)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mPrezimeULicnojKarti, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(mIme)
                    .addComponent(mImeULicnojKarti)
                    .addComponent(mPrezime))
                .addGap(42, 42, 42))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mImeULicnojKarti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(mIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPrezimeULicnojKarti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(8, 8, 8))
        );

        jPanel13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mJmbg.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel1.setText("Jmbg:");

        mDatumRodjenja.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel9.setText("Datum rodjenja:");

        mMestoRodjenja.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel8.setText("Mesto rođenja:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel4.setText("Ime oca:");

        mImeOca.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel5.setText("Ime majke:");

        mImeMajke.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(mJmbg)
                            .addComponent(mMestoRodjenja, 0, 264, Short.MAX_VALUE)
                            .addComponent(mDatumRodjenja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mImeOca, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addComponent(mImeMajke, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mJmbg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mDatumRodjenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(12, 12, 12)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(mMestoRodjenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(mImeOca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mImeMajke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel11.setText("Nacionalnost:");

        mNacionalnost.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel10.setText("Državljanstvo:");

        mDrzavljanstvo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel12.setText("Telefon:");

        mTelefon.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel13.setText("Email:");

        mEmail.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mNacionalnost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mDrzavljanstvo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mTelefon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mNacionalnost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDrzavljanstvo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mZupaNaziv.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel71.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel71.setText("Naziv župe:");

        jLabel72.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel72.setText("Banka:");

        mBanka.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel73.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel73.setText("Tekući rn:");

        mTekuciRacun.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel74.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel74.setText("Tip entiteta:");

        mTipEntiteta.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel74, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel71, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel72, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel73, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mBanka, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mTekuciRacun)
                            .addComponent(mTipEntiteta, 0, 308, Short.MAX_VALUE)))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(mZupaNaziv, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel71)
                    .addComponent(mZupaNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mTipEntiteta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel74))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBanka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel72))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mTekuciRacun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel73))
                .addGap(16, 16, 16))
        );

        jPanel16.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        AttachBtn.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        AttachBtn.setText("Attach");
        AttachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttachBtnActionPerformed(evt);
            }
        });

        mSlika.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel15.setText("Slika");

        mLabelSlika.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane5.setViewportView(mLabelSlika);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AttachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(mSlika)
                        .addContainerGap())))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(mSlika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AttachBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel75.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel75.setText("Ustanova:");

        mUstanovaNaziv.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel76.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel76.setText("Datum prestanka službe:");

        mDatumPrestankaSluzbe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jLabel77.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel77.setText("Aktivan:");

        jCheckBox1.setSelected(true);
        jCheckBox1.setToolTipText("Aktivna služba");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel75)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(mUstanovaNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel76)
                            .addComponent(jLabel77))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(mDatumPrestankaSluzbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mUstanovaNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel75))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDatumPrestankaSluzbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel76))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel77)
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Osobni podaci o svećenicima", jPanel1);

        jPanel17.setBackground(new java.awt.Color(204, 204, 204));

        jPanel18.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel32.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel32.setText("Mjesto:");

        mSrednjeObrazovanjeMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel33.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel33.setText("Naziv škole:");

        mSrednjeObrazovanjeSkola.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel61.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel61.setText("Od - Do:");

        mSrednjeObrazovanjePeriodOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mSrednjeObrazovanjePeriodDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addComponent(jLabel32))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mSrednjeObrazovanjeSkola, 0, 253, Short.MAX_VALUE)
                            .addComponent(mSrednjeObrazovanjeMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jLabel61)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(mSrednjeObrazovanjePeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mSrednjeObrazovanjePeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel32)
                    .addComponent(mSrednjeObrazovanjeMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mSrednjeObrazovanjeSkola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addGap(15, 15, 15)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(mSrednjeObrazovanjePeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mSrednjeObrazovanjePeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel19.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mBogoslovijaMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel36.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel36.setText("Mjesto:");

        jLabel65.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel65.setText("Od - Do:");

        mBogoslovijaPeriodOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mBogoslovijaPeriodDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(47, 47, 47)
                        .addComponent(mBogoslovijaMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel65)
                        .addGap(26, 26, 26)
                        .addComponent(mBogoslovijaPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(mBogoslovijaPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBogoslovijaMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addGap(26, 26, 26)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel65)
                    .addComponent(mBogoslovijaPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mBogoslovijaPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel20.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mBogoslovijaMesto1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel39.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel39.setText("Mjesto:");

        jLabel68.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel68.setText("Od - Do:");

        mBogoslovijaPeriodOd1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mBogoslovijaPeriodDo1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(mBogoslovijaMesto1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jLabel68)
                    .addGap(26, 26, 26)
                    .addComponent(mBogoslovijaPeriodOd1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(27, 27, 27)
                    .addComponent(mBogoslovijaPeriodDo1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(30, Short.MAX_VALUE)))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mBogoslovijaMesto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addGap(69, 69, 69)
                    .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel68)
                        .addComponent(mBogoslovijaPeriodDo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mBogoslovijaPeriodOd1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(38, Short.MAX_VALUE)))
        );

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel6.setText("Srednje obrazovanje");

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel7.setText("Bogoslovija:");

        jLabel31.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel31.setText("Bogoslovija:");

        jLabel42.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel42.setText("Bogoslovija:");

        jPanel21.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mBogoslovijaMesto2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel43.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel43.setText("Mjesto:");

        jLabel69.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel69.setText("Od - Do:");

        mBogoslovijaPeriodOd2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mBogoslovijaPeriodDo2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mBogoslovijaMesto2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(mBogoslovijaPeriodOd2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mBogoslovijaPeriodDo2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addComponent(jLabel69)
                    .addContainerGap(261, Short.MAX_VALUE)))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(mBogoslovijaMesto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBogoslovijaPeriodOd2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mBogoslovijaPeriodDo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(jLabel69)
                    .addContainerGap(61, Short.MAX_VALUE)))
        );

        jLabel46.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel46.setText("Đakonsko ređenje:");

        jPanel22.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mDjakonatMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mDjakonatDatum.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        mDjakonatDatum.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel47.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel47.setText("Mjesto:");

        jLabel48.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel48.setText("Datum:");

        jLabel49.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel49.setText("Zareditelj:");

        mDjakonatZareditelj.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                            .addComponent(jLabel47)
                            .addGap(57, 57, 57))
                        .addGroup(jPanel22Layout.createSequentialGroup()
                            .addComponent(jLabel48)
                            .addGap(33, 33, 33)))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDjakonatDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(mDjakonatZareditelj, 0, 288, Short.MAX_VALUE)
                        .addComponent(mDjakonatMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDjakonatMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47))
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(mDjakonatDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mDjakonatZareditelj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel49)))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel48)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jLabel50.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel50.setText("Svećeničko ređenje:");

        jPanel23.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mPrezbiteratMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPrezbiteratDatum.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        mPrezbiteratDatum.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel51.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel51.setText("Mjesto:");

        jLabel52.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel52.setText("Datum:");

        jLabel53.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel53.setText("Zareditelj:");

        mPrezbiteratZareditelj.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel53, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jLabel51)
                        .addGap(24, 24, 24)))
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(mPrezbiteratDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mPrezbiteratZareditelj, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mPrezbiteratMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(mPrezbiteratMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(mPrezbiteratDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mPrezbiteratZareditelj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jLabel51)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel52)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel53)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel54.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel54.setText("Dodiplomski studij:");

        jPanel24.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mDodiplomskiStudijMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel55.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel55.setText("Mjesto:");

        jLabel56.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel56.setText("Od - Do:");

        jLabel57.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel57.setText("Ustanova:");

        mDodiplomskiStudijUstanova.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mDodiplomskiStudijPeriodDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mDodiplomskiStudijPeriodOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel56)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mDodiplomskiStudijPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mDodiplomskiStudijPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel57)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel55)))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDodiplomskiStudijMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mDodiplomskiStudijUstanova, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDodiplomskiStudijMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55))
                .addGap(18, 18, 18)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDodiplomskiStudijUstanova, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57))
                .addGap(16, 16, 16)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mDodiplomskiStudijPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mDodiplomskiStudijPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel56))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jLabel58.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel58.setText("Magisterij:");

        jPanel25.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mMagisterijMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel59.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel59.setText("Mjesto:");

        jLabel60.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel60.setText("Ustanova:");

        mMagisterijNazivUstanove.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel66.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel66.setText("Od - Do:");

        mMagisterijPeriodOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mMagisterijPeriodDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel59)
                    .addComponent(jLabel60)
                    .addComponent(jLabel66))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(mMagisterijPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mMagisterijPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mMagisterijNazivUstanove, 0, 356, Short.MAX_VALUE)
                    .addComponent(mMagisterijMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mMagisterijMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59))
                .addGap(18, 18, 18)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(mMagisterijNazivUstanove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mMagisterijPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mMagisterijPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel66))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel62.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel62.setText("Doktorat:");

        jPanel26.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mDoktoratMesto.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel63.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel63.setText("Mjesto:");

        jLabel64.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel64.setText("Ustanova:");

        mDoktoratNazivUstanove.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel67.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel67.setText("Od - Do:");

        mDoktoratPeriodOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mDoktoratPeriodDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel63)
                            .addComponent(jLabel64))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mDoktoratNazivUstanove, 0, 305, Short.MAX_VALUE)
                            .addComponent(mDoktoratMesto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jLabel67)
                        .addGap(56, 56, 56)
                        .addComponent(mDoktoratPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mDoktoratPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDoktoratMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel63))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel64)
                    .addComponent(mDoktoratNazivUstanove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel67, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mDoktoratPeriodDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mDoktoratPeriodOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel54)
                    .addComponent(jLabel42)
                    .addComponent(jLabel6)
                    .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(902, 902, 902)
                        .addComponent(jLabel62))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(902, 902, 902)
                        .addComponent(jLabel50))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(898, 898, 898)
                        .addComponent(jLabel31))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(jLabel58))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel46))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel18, jPanel21, jPanel24});

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel20, jPanel23, jPanel26});

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel19, jPanel22, jPanel25});

        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel46)
                            .addComponent(jLabel50))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel54)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel17Layout.createSequentialGroup()
                            .addComponent(jLabel62)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel17Layout.createSequentialGroup()
                            .addComponent(jLabel58)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Obrazovanje", jPanel17);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel16.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel16.setText("Mjesto službe:");

        mPOPSMestoSluzbe.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPOPSNazivUstanove.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        mPOPSNazivUstanove.setEnabled(false);

        jLabel18.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel18.setText("Naziv ustanove:");

        jLabel19.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel19.setText("Svojstvo:");

        mPOPSSvojstvo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPOPSDekret.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel17.setText("Dekret:");

        jLabel20.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel20.setText("Početak službe od:");

        mPOPSPocetakSluzbeOd.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        mPOPSTrajanjeSluzbeDo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jLabel21.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel21.setText("Trajanje službe do:");

        dodajPastoralnuSluzbuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/new.png"))); // NOI18N
        dodajPastoralnuSluzbuBtn.setText("Dodaj");
        dodajPastoralnuSluzbuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajPastoralnuSluzbuBtnActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel34.setText("Naziv župe:");

        mPOPSNazivZupe.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel34)
                    .addComponent(jLabel19)
                    .addComponent(jLabel17)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mPOPSDekret, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mPOPSSvojstvo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mPOPSMestoSluzbe, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mPOPSNazivZupe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 79, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(mPOPSTrajanjeSluzbeDo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mPOPSPocetakSluzbeOd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                            .addComponent(mPOPSNazivUstanove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(dodajPastoralnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(187, 187, 187))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(mPOPSMestoSluzbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(mPOPSNazivZupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPOPSSvojstvo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPOPSDekret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mPOPSPocetakSluzbeOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mPOPSTrajanjeSluzbeDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(mPOPSNazivUstanove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addComponent(dodajPastoralnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ListPodaciOPastoralnojSluzbi.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ListPodaciOPastoralnojSluzbi.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListPodaciOPastoralnojSluzbiValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ListPodaciOPastoralnojSluzbi);

        obrisiPastoralnuSluzbuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/delete_1.png"))); // NOI18N
        obrisiPastoralnuSluzbuBtn.setText("Obrisi");
        obrisiPastoralnuSluzbuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrisiPastoralnuSluzbuBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(obrisiPastoralnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(obrisiPastoralnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Podaci o pastoralnoj službi", jPanel5);

        jPanel27.setBackground(new java.awt.Color(204, 204, 204));
        jPanel27.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel37.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel37.setText("Mesto službe:");

        mPODSMestoSluzbe.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPODSNazivUstanove.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel38.setText("Naziv ustanove:");

        jLabel40.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel40.setText("Svojstvo:");

        mPODSSvojstvo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        mPODSDekret.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel41.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel41.setText("Dekret:");

        jLabel44.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel44.setText("Početak službe od:");

        mPODSPocetakSluzbeOd.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        mPODSTrajanjeSluzbeDo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jLabel45.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel45.setText("Trajanje službe do:");

        dodajDodatnuSluzbuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/new.png"))); // NOI18N
        dodajDodatnuSluzbuBtn.setText("Dodaj");
        dodajDodatnuSluzbuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajDodatnuSluzbuBtnActionPerformed(evt);
            }
        });

        jLabel70.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel70.setText("Naziv župe:");

        mPODSNazivZupe.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        mPODSNazivZupe.setEnabled(false);

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel28Layout.createSequentialGroup()
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mPODSSvojstvo, 0, 301, Short.MAX_VALUE)
                            .addComponent(mPODSDekret)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(63, 63, 63)
                        .addComponent(mPODSNazivUstanove, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel28Layout.createSequentialGroup()
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addComponent(jLabel45))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mPODSPocetakSluzbeOd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mPODSTrajanjeSluzbeDo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addGap(78, 78, 78)
                        .addComponent(mPODSMestoSluzbe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(dodajDodatnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(190, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mPODSNazivZupe, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(mPODSMestoSluzbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(mPODSNazivUstanove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPODSSvojstvo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addGap(18, 18, 18)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPODSDekret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mPODSPocetakSluzbeOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44))
                .addGap(18, 18, 18)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mPODSTrajanjeSluzbeDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPODSNazivZupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel70))
                .addGap(18, 18, 18)
                .addComponent(dodajDodatnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        ListPodaciODodatnojSluzbi.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ListPodaciODodatnojSluzbi.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListPodaciODodatnojSluzbiValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(ListPodaciODodatnojSluzbi);

        obrisiDodatnuSluzbuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/delete_1.png"))); // NOI18N
        obrisiDodatnuSluzbuBtn.setText("Obrisi");
        obrisiDodatnuSluzbuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obrisiDodatnuSluzbuBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(obrisiDodatnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addGap(18, 18, 18)
                .addComponent(obrisiDodatnuSluzbuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(89, 89, 89))
        );

        jScrollPane3.setViewportView(jPanel27);

        jTabbedPane1.addTab("Podaci o dodatnim službama", jScrollPane3);

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mPOPIOSvojstvoOsiguranika.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel22.setText("Svojstvo osiguranika:");

        mPOPIOPocetakOsiguranjaOd.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        mPOPIOPocetakOsiguranjaOd.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel23.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel23.setText("Početak osiguranja od:");

        mPOPIOTrajanjeOsiguranjaDo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        mPOPIOTrajanjeOsiguranjaDo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel24.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel24.setText("Trajanje osiguranja do:");

        mPOPIOMestoOsiguranika.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel25.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel25.setText("Mjesto:");

        dodajPodaciOPrijaviIOsiguranjuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/new.png"))); // NOI18N
        dodajPodaciOPrijaviIOsiguranjuBtn.setText("Dodaj");
        dodajPodaciOPrijaviIOsiguranjuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajPodaciOPrijaviIOsiguranjuBtnActionPerformed(evt);
            }
        });

        mPOPIOOpstina.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        jLabel35.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel35.setText("Općina:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mPOPIOMestoOsiguranika, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(mPOPIOPocetakOsiguranjaOd, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(mPOPIOOpstina, javax.swing.GroupLayout.Alignment.LEADING, 0, 202, Short.MAX_VALUE)
                                    .addComponent(mPOPIOSvojstvoOsiguranika, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(mPOPIOTrajanjeOsiguranjaDo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel22)
                        .addComponent(jLabel35)
                        .addComponent(jLabel25)
                        .addComponent(jLabel23)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dodajPodaciOPrijaviIOsiguranjuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(mPOPIOMestoOsiguranika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPOPIOSvojstvoOsiguranika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mPOPIOOpstina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mPOPIOPocetakOsiguranjaOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mPOPIOTrajanjeOsiguranjaDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(dodajPodaciOPrijaviIOsiguranjuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ListPodaciOPrijaviIOsiguranju.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ListPodaciOPrijaviIOsiguranju.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ListPodaciOPrijaviIOsiguranjuMouseReleased(evt);
            }
        });
        ListPodaciOPrijaviIOsiguranju.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListPodaciOPrijaviIOsiguranjuValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ListPodaciOPrijaviIOsiguranju);

        brisanjejPodaciOPrijaviIOsiguranjuBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/delete_1.png"))); // NOI18N
        brisanjejPodaciOPrijaviIOsiguranjuBtn.setText("Brisanje");
        brisanjejPodaciOPrijaviIOsiguranjuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brisanjejPodaciOPrijaviIOsiguranjuBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brisanjejPodaciOPrijaviIOsiguranjuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(773, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(307, Short.MAX_VALUE)
                .addComponent(brisanjejPodaciOPrijaviIOsiguranjuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(132, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(160, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Podaci o prijavi i osiguranju", jPanel8);

        AddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/new.png"))); // NOI18N
        AddBtn.setText("Upis");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        OdustaniBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/exit.png"))); // NOI18N
        OdustaniBtn.setText("Izlaz");
        OdustaniBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OdustaniBtnActionPerformed(evt);
            }
        });

        UpdateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/edit.png"))); // NOI18N
        UpdateBtn.setText("Izmena");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(OdustaniBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OdustaniBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Osobni podaci o svećenicima");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        // TODO add your handling code here:
//        String sql = " insert into licni_podaci (jmbg, ime, prezime, ime_oca, ime_majke, "
//                    + "datumrodj, mestorodj) "
//                    + "values ('" + mJmbg.getText() + "', '"
//                    + mIme.getText() + "',' " + mPrezime.getText() + "','"
//                    + mImeOca.getText() + "','" + mImeMajke.getText() + "','"
//                    + mDatumRodj.getSQLDate() + "','" + mMestoRodj.getSelectedItem()
//                    + "')";
//
//        PreparemMestoRodjenja ps = conn.prepareStatement(sql,
//                Statement.RETURN_GENERATED_KEYS);
//
//        ps.execute();
//
//        ResultSet rs = ps.getGeneratedKeys();
//        int generatedKey = 0;
//        if (rs.next()) {
//            generatedKey = rs.getInt(1);
//        }
//
//        System.out.println("Inserted record's ID: " + generatedKey);

        if (!OK()) {
            return;
        }
        Statement stmt = null;
        ResultSet rs = null;
        //     `id`,
        try {

            InputStream inputStream = null;
            try {
                if (!mSlika.getText().isEmpty()) {
                    inputStream = new FileInputStream(new File(mSlika.getText()));
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Problem sa slikom .... ");
                Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
            }
//            boolean b = jCheckBox1.isSelected();
//            mAktivan=0;
//            if (b) mAktivan=1;
            sqlQuery11 = "INSERT INTO `licni_podaci`( "
                    //                    + "`oslovljavanje_sifra`, `oslovljavanje_id`, "
                    + "`oslovljavanje`, "
                    //                    + "`crkvena_titula_sifra`, `crkvena_titula_id`, "
                    + "`crkvena_titula`, "
                    //                    + "`akademska_titula_sifra`, `akademska_titula_id`, "
                    + "`akademska_titula`, "
                    + "`jmbg`, `ime`, `prezime`, `ime_u_lk`, `prezime_u_lk`, `ime_oca`, `ime_majke`, "
                    + "`datum_rodjenja`, "
                                        + "`datum_prestanka_sluzbe`, "
                    //                    + "`mesto_rodjenja_id`, "
                    + "`mesto_rodjenja`, "
                    
                    //                    + "`mesto_rodjenja_sifra`, "
                    //                    + "`srednje_obrazovanje_mesto_id`, `srednje_obrazovanje_mesto_sifra`, "
                    + "`srednje_obrazovanje_mesto`, "
                    //                    + "`srednje_obrazovanje_skola_id`, "
                    //                    + "`srednje_obrazovanje_skola_sifra`, "
                    + "`srednje_obrazovanje_skola`, "
                    + "`srednje_obrazovanje_od`, `srednje_obrazovanje_do`, "
                    //                    + "`brprotokola`, `pol`, `drzavarodj`, `id_drzavarodj`, `adresa`, `ptt`, `id_ptt`, "
                    + "`telefon`, `e_mail`, "
                    //                    + "`status`, `id_status`, "
                    + "`drzavljanstvo`, "
                    //                    + "`id_drzavljanstvo`, "
                    + "`nacionalnost`, "
                    + "`zupa_naziv`, "
                    + "`ustanova_naziv`, "
                    + "`tip_entiteta`, "
                    + "`banka`, "
                    + "`tekuci_racun`, "
                    //                    + "`id_nacionalnost`, "
                    + "`slika`, "
                    //                    + "`banka_isplata`, `id_banka_isplata`, "
                    //                    + "`racun_isplate`, `opstina`, `id_opstina`, `sifra`, "
                    //                    + "`bogoslovija_mesto_id`, `bogoslovija_mesto_sifra`, "
                    + "`bogoslovija_mesto`, "
                    //                    + "`bogoslovija_mesto1_id`, "
                    //                    + "`bogoslovija_mesto1_sifra`, "
                    + "`bogoslovija_mesto1`, "
                    //                    + "`bogoslovija_mesto2_id`, "
                    //                    + "`bogoslovija_mesto2_sifra`, "
                    + "`bogoslovija_mesto2`, `bogoslovija_period_od`, "
                    + "`bogoslovija_period_do`, `bogoslovija_period_od1`, `bogoslovija_period_do1`, "
                    + "`bogoslovija_period_od2`, `bogoslovija_period_do2`, "
                    //                    + "`djakonat_mesto_id`, "
                    //                    + "`djakonat_mesto_sifra`, "
                    + "`djakonat_mesto`, `djakonat_datum`, "
                    //                    + "`djakonat_zareditelj_id`, "
                    //                    + "`djakonat_zareditelj_sifra`, "
                    + "`djakonat_zareditelj`, "
                    //                    + "`prezbiterat_mesto_id`, "
                    //                    + "`prezbiterat_mesto_sifra`, "
                    + "`prezbiterat_mesto`, `prezbiterat_datum`, "
                    //                    + "`prezbiterat_zareditelj_id`, `prezbiterat_zareditelj_sifra`, "
                    + "`prezbiterat_zareditelj`, "
                    //                    + "`dodiplomski_studij_mesto_id`, `dodiplomski_studij_mesto_sifra`, "
                    + "`dodiplomski_studij_mesto`, "
                    //                    + "`dodiplomski_studij_naziv_ustanove_id`, `"
                    //                    + "dodiplomski_studij_naziv_ustanove_sifra`, "
                    + "`dodiplomski_studij_naziv_ustanove`, "
                    + "`dodiplomski_studij_period_od`, `dodiplomski_studij_period_do`, "
                    //                    + "`magisterij_mesto_id`, `magisterij_mesto_sifra`, "
                    + "`magisterij_mesto`, "
                    //                    + "`magisterij_naziv_ustanove_id`, `magisterij_naziv_ustanove_sifra`, "
                    + "`magisterij_naziv_ustanove`, `magisterij_period_od`, `magisterij_period_do`, "
                    //                    + "`doktorat_mesto_id`, `doktorat_mesto_sifra`, "
                    + "`doktorat_mesto`, "
                    //                    + "`doktorat_naziv_ustanove_id`, `doktorat_naziv_ustanove_sifra`, "
                    + "`doktorat_naziv_ustanove`, `doktorat_period_od`, photo, `doktorat_period_do`) "
                    + "VALUES( '"
                    //                    + "'', " + "'', '" + mOslovljavanje.getSelectedItem().toString() + "', "
                    //                    + "'', " + "'', '" + mCrkvenaTitula.getSelectedItem().toString() + "', "
                    //                    + "'', " + "'', '" + mAkademskaTitula.getSelectedItem().toString() + "', '"

                    + mOslovljavanje.getSelectedItem().toString() + "', '"
                    + mCrkvenaTitula.getSelectedItem().toString() + "', '"
                    + mAkademskaTitula.getSelectedItem().toString() + "', '"
                    + mJmbg.getText() + "', '"
                    + mIme.getText() + "', '"
                    + mPrezime.getText() + "', '"
                    + mImeULicnojKarti.getText() + "', '"
                    + mPrezimeULicnojKarti.getText() + "', '"
                    + mImeOca.getText() + "', '"
                    + mImeMajke.getText() + "', '"
                    + mDatumRodjenja.getSQLDate() + "', '"
                    + mDatumPrestankaSluzbe.getSQLDate() + "', '"
                    + mMestoRodjenja.getSelectedItem().toString() + "','"
                    + mSrednjeObrazovanjeMesto.getSelectedItem().toString() + "', '"
                    + mSrednjeObrazovanjeSkola.getSelectedItem().toString() + "', '"
                    + mSrednjeObrazovanjePeriodOd.getText() + "', '"
                    + mSrednjeObrazovanjePeriodDo.getText() + "', '"
                    + mTelefon.getText() + "', '"
                    + mEmail.getText() + "', '"
                    + mDrzavljanstvo.getSelectedItem().toString() + "', '"
                    + mNacionalnost.getSelectedItem().toString() + "', '"
                    + mZupaNaziv.getSelectedItem().toString() + "', '"
                    + mUstanovaNaziv.getSelectedItem().toString() + "', '"
                    + mTipEntiteta.getSelectedItem().toString() + "', '"
                    + mBanka.getSelectedItem().toString() + "', '"
                    + mTekuciRacun.getText() + "', '"
                    + mSlika.getText() + "', '"
                    + mBogoslovijaMesto.getSelectedItem().toString() + "', '"
                    + mBogoslovijaMesto1.getSelectedItem().toString() + "', '"
                    + mBogoslovijaMesto2.getSelectedItem().toString() + "', '"
                    + mBogoslovijaPeriodOd.getText() + "', '"
                    + mBogoslovijaPeriodDo.getText() + "', '"
                    + mBogoslovijaPeriodOd1.getText() + "', '"
                    + mBogoslovijaPeriodDo1.getText() + "', '"
                    + mBogoslovijaPeriodOd2.getText() + "', '"
                    + mBogoslovijaPeriodDo2.getText() + "', '"
                    + mDjakonatMesto.getSelectedItem().toString() + "', '"
                    + mDjakonatDatum.getSQLDate() + "', '"
                    + mDjakonatZareditelj.getSelectedItem().toString() + "', '"
                    + mPrezbiteratMesto.getSelectedItem().toString() + "', '"
                    + mPrezbiteratDatum.getSQLDate() + "', '"
                    + mPrezbiteratZareditelj.getSelectedItem().toString() + "', '"
                    + mDodiplomskiStudijMesto.getSelectedItem().toString() + "', '"
                    + mDodiplomskiStudijUstanova.getSelectedItem().toString() + "', '"
                    + mDodiplomskiStudijPeriodOd.getText() + "', '"
                    + mDodiplomskiStudijPeriodDo.getText() + "', '"
                    + mMagisterijMesto.getSelectedItem().toString() + "', '"
                    + mMagisterijNazivUstanove.getSelectedItem().toString() + "', '"
                    + mMagisterijPeriodOd.getText() + "', '"
                    + mMagisterijPeriodDo.getText() + "', '"
                    + mDoktoratMesto.getSelectedItem().toString() + "', '"
                    + mDoktoratNazivUstanove.getSelectedItem().toString() + "', '"
                    + mDoktoratPeriodOd.getText() + "', '"
                    + "" + "', '" //+ inputStream + "', '"
                    //                    + mSlika.getText() + "', '"
                    + mDoktoratPeriodDo.getText() + "')";
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }

            System.out.println(sqlQuery11);

//            String sqlQuery = " insert into licni_podaci (jmbg, ime, prezime, ime_oca, ime_majke, "
//                    + "datumrodj, mestorodj, drzavljanstvo, nacionalnost, telefon, e_mail) "
//                    + "values ('" + mJmbg.getText() + "', '"
//                    + mIme.getText() + "',' " + mPrezime.getText() + "','"
//                    + mImeOca.getText() + "','" + mImeMajke.getText() + "','"
//                    + mDatumRodj.getSQLDate() + "','" + mMestoRodjenja.getSelectedItem() + "','"
//                    + mDrzavljanstvo.getSelectedItem() + "','"
//                    + mNacionalnost.getSelectedItem() + "','"
//                    + mTelefon.getText() + "','"
//                    + mEmail.getText()
//                    + "')";
//        try {
            stmt = conn.createStatement();
            PreparedStatement ps = conn.prepareStatement(sqlQuery11,
                    Statement.RETURN_GENERATED_KEYS);
            ps.execute();

            rs = ps.getGeneratedKeys();
            int generatedKey = 0;
            if (rs.next()) {
                generatedKey = rs.getInt(1);
                mId.setText(Integer.toString(generatedKey));
            }

            System.out.println("Inserted record's ID: " + generatedKey);

//            System.out.println(sqlQuery);
//  mMestoRodjenjastmt.executeUpdate(sqlQuery);
//            if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
//                String sqlQuery1 = " insert into podaci_o_pastoralnoj_sluzbi (user_id, jmbg, mesto_sluzbe, "
//                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
//                        + ") "
//                        + "values ('" + generatedKey + "', '"
//                        + mJmbg.getText() + "', '"
//                        + mPOPSMestoSluzbe.getSelectedItem().toString() + "','"
//                        + mPOPSNazivUstanove.getSelectedItem().toString() + "','"
//                        + mPOPSNazivZupe.getSelectedItem().toString() + "','"
//                        + mPOPSSvojstvo.getSelectedItem().toString() + "','"
//                        + mPOPSDekret.getText() + "','"
//                        + mPOPSPocetakSluzbeOd.getSQLDate() + "','"
//                        + mPOPSTrajanjeSluzbeDo.getSQLDate()
//                        + "')";
//
//                System.out.println(sqlQuery1);
//
//                stmt.executeUpdate(sqlQuery1);
//            }
            //    conn.commit();
            // citanje niza i upis u tabelu podaci o pastoralnoj sluzbi
//            String aa = (String) ListPodaciOPastoralnojSluzbi.getSelectedValue();
//            String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);  
//            int mUser_id = generatedKey;
            for (PodaciOPastoralnojSluzbi u : popsArray) {

                System.out.println(u);
                u.toString();
                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro
//             if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
//                String odd = formatter.format(u.getPocetakSluzbeOd());
//                String dod = formatter.format(u.getTrajanjeSluzbeDo());
                String sqlQuery1 = " insert into podaci_o_pastoralnoj_sluzbi (user_id, jmbg, rbr, mesto_sluzbe, "
                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        //                        + u.toString() + "', '"
                        + u.getRbr() + "', '"
                        + u.getMestoSluzbe() + "','"
                        + u.getNazivUstanove() + "','"
                        + u.getNazivZupe() + "','"
                        + u.getSvojstvo() + "','"
                        + u.getDekret() + "','"
                        + formatter.format(u.getPocetakSluzbeOd()) + "','"
                        + formatter.format(u.getTrajanjeSluzbeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);

//             }
//            u.setRbr(a);
//            ODLM.addElement(u.getRbr()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
//            );
////            System.out.println(u.getId() + ":" + u.getMesto());
//            a++;
            }

            for (PodaciODodatnojSluzbi u : podsArray) {

                System.out.println(u);
                u.toString();
                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro
//             if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
//                String odd = formatter.format(u.getPocetakSluzbeOd());
//                String dod = formatter.format(u.getTrajanjeSluzbeDo());
                String sqlQuery1 = " insert into podaci_o_dodatnoj_sluzbi (user_id, jmbg, rbr, mesto_sluzbe, "
                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        //                        + u.toString() + "', '"
                        + u.getRbr() + "', '"
                        + u.getMestoSluzbe() + "','"
                        + u.getNazivUstanove() + "','"
                        + u.getNazivZupe() + "','"
                        + u.getSvojstvo() + "','"
                        + u.getDekret() + "','"
                        + formatter.format(u.getPocetakSluzbeOd()) + "','"
                        + formatter.format(u.getTrajanjeSluzbeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);

//             }
//            u.setRbr(a);
//            ODLM.addElement(u.getRbr()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
//            );
////            System.out.println(u.getId() + ":" + u.getMesto());
//            a++;
            }

            for (PodaciOPrijaviIOsiguranju u : popioArray) {

                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro
//             if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
//                String odd = formatter.format(u.getPocetakSluzbeOd());
//                String dod = formatter.format(u.getTrajanjeSluzbeDo());
                String sqlQuery1 = " insert into podaci_o_prijavi_i_osiguranju (user_id, jmbg, rbr, mesto, "
                        + " svojstvo_osiguranika, opstina, pocetak_od, trajanje_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        + u.getRbr() + "','"
                        //                        + u.toString() + "', '"
                        + u.getMesto() + "','"
                        + u.getSvojstvoOsiguranika() + "','"
                        + u.getOpstina() + "','"
                        + formatter.format(u.getPocetakOd()) + "','"
                        + formatter.format(u.getTrajanjeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);

            }

            JOptionPane.showMessageDialog(null, "Zapis je upisan");



        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
            try {
                conn.rollback();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
//          Logger.getLogger(putniNaloziZ.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex);
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                    rs = null;
                } catch (Exception e) {
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                    stmt = null;
                } catch (Exception e) {
                }
            }
        }
        
                            upisiZaKraj();
                            nuliranjeForme();
    }//GEN-LAST:event_AddBtnActionPerformed

    private void OdustaniBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OdustaniBtnActionPerformed
        // TODO add your handling code here:
        JDialog.setDefaultLookAndFeelDecorated(true);
        Object stringArray[] = {"Da", "Ne"};
//    JOptionPane.showOptionDialog(frame, "Continue printing?", "Select an Option",
//        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, blueIcon, stringArray,
//        stringArray[0]);
        Icon blueIcon = new ImageIcon("yourFile.gif");
        int response = JOptionPane.showOptionDialog(null, "Ukoliko ste pravili izmene, podatke treba snimiti ... \n Da li želite izlaz?", "Potvrda",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, blueIcon, stringArray,
                stringArray[0]);
        if (response == JOptionPane.NO_OPTION) {
            return;
        } else if (response == JOptionPane.YES_OPTION) {
//      System.out.println("Yes button clicked");
        } else if (response == JOptionPane.CLOSED_OPTION) {
            return;
        }

upisiZaKraj();
        this.dispose();
    }//GEN-LAST:event_OdustaniBtnActionPerformed

    private void AttachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttachBtnActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        filename = filename.replace("\\", "\\\\");
        mSlika.setText(filename);
        ImageIcon icon = new ImageIcon(filename);
        mLabelSlika.setIcon(icon);
    }//GEN-LAST:event_AttachBtnActionPerformed

    private void ListPodaciOPastoralnojSluzbiValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListPodaciOPastoralnojSluzbiValueChanged
//        try {
//            Statement stmt = conn.createStatement();
//            // String[] array = yourString.split(wordSeparator);
//            String aa = (String) ListPodaciOPastoralnojSluzbi.getSelectedValue();
//            String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);
//
//            String sqlQuery = " select * from licni_podaci where id like '" + niz[0]
//                    + "' and jmbg like '" + mMestoRodjenja + "' and ime like '" + niz[2] + "'";
//            sqlQuery = " select * from licni_podaci where id like '" + niz[0]
//                    + "'";
//
//            ResultSet rs = stmt.executeQuery(sqlQuery);
//
//            while (rs.next()) {
//                mId.setText(rs.getString(1));
//                mJmbg.setText(rs.getString(2));
//                mIme.setText(rs.getString(3));
//                mPrezime.setText(rs.getString(4));
//                mImeOca.setText(rs.getString(5));
//                mImeMajke.setText(rs.getString(6));
//                Date a = rs.getDate(9);
//                mDatumRodjenja.setDate(a);
//                try {
//                    mDatumRodjenja.setDate(rs.getDate(9));
//                } catch (ParseException ex) {
//                    Logger.getLogger(SearchWithTab.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                String ddd = rs.getString("mestorodj");
//                mMestoRodjenja.setSelectedItem(rs.getString("mestorodj"));
//
//            }
//
//        } catch (SQLException | ParseException ex) {
//            Logger.getLogger(SearchWithTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_ListPodaciOPastoralnojSluzbiValueChanged

    private void dodajPastoralnuSluzbuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajPastoralnuSluzbuBtnActionPerformed
        try {
            // TODO add your handling code here:
            System.out.println(mPOPSTrajanjeSluzbeDo.getDate().getTime());
            System.out.println(mPOPSTrajanjeSluzbeDo.getDate());
            System.out.println(mPOPSTrajanjeSluzbeDo.getSQLDate());
            if (!mPOPSTrajanjeSluzbeDo.getSQLDate().toString().equals("1900-01-01")) {
                if (mPOPSPocetakSluzbeOd.getDate().getTime() > mPOPSTrajanjeSluzbeDo.getDate().getTime()) {
                    JOptionPane.showMessageDialog(this, "Datum OD je veci od datuma DO ....");
                    return;
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
        pops.setJmbg(mJmbg.getText());
        pops.setMestoSluzbe(mPOPSMestoSluzbe.getSelectedItem().toString());
        pops.setNazivUstanove(mPOPSNazivUstanove.getSelectedItem().toString());
        pops.setNazivZupe(mPOPSNazivZupe.getSelectedItem().toString());
        pops.setSvojstvo(mPOPSSvojstvo.getSelectedItem().toString());
        pops.setDekret(mPOPSDekret.getText());
        try {
            pops.setPocetakSluzbeOd(mPOPSPocetakSluzbeOd.getSQLDate());
            pops.setTrajanjeSluzbeDo(mPOPSTrajanjeSluzbeDo.getSQLDate());
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }

//        popsArray.add(pops);
//        FillList();
//                PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
//                pops.setMestoSluzbe(mPOPSMestoSluzbe.getSelectedItem().toString());
//                pops.setNazivUstanove(mPOPSNazivUstanove.getSelectedItem().toString());
//                pops.setNazivZupe(mPOPSNazivZupe.getSelectedItem().toString());
//                pops.setSvojstvo(mPOPSSvojstvo.getSelectedItem().toString());
//                
//        pops.setMesto(mPOPIOMestoOsiguranika.getSelectedItem().toString());
//        pops.setSvojstvoOsiguranika(mPOPIOSvojstvoOsiguranika.getSelectedItem().toString());
//
//        try {
//            popio.setPocetakOd(mPOPIOPocetakOsiguranjaOd.getSQLDate());
//            popio.setTrajanjeDo(mPOPIOTrajanjeOsiguranjaDo.getSQLDate());
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
        pops.setRbr(popsArray.size() + 1);
        pops.setJmbg(mJmbg.getText());

        popsArray.add(pops);

// mani se corava posla
//        DLM.addElement(popio.getRbr()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getMesto()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getSvojstvoOsiguranika()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getPocetakOd()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getTrajanjeDo());
//
//        ListPodaciOPrijaviIOsiguranju.setModel(DLM);
        FillListPodaciOPastoralnojSluzbi();


    }//GEN-LAST:event_dodajPastoralnuSluzbuBtnActionPerformed

    private void ListPodaciOPrijaviIOsiguranjuValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListPodaciOPrijaviIOsiguranjuValueChanged
        // TODO add your handling code here:

//        String aa = (String) ListPodaciOPrijaviIOsiguranju.getSelectedValue();
//        String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);
//
//        String startDate = niz[3];
//        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
//        java.util.Date date = null, date1 = null;
//        try {
//            date = sdf1.parse(niz[3]);
//            date1 = sdf1.parse(niz[4]);
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        java.sql.Date sqlStartDate = new Date(date.getTime());
//        try {
//            mPocetakOsiguranjaOd.setDate(date);
//            mTrajanjeOsiguranjaDo.setDate(date1);
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        mMestoOsiguranika.setSelectedItem(niz[1]);
//        mSvojstvoOsiguranika.setSelectedItem(niz[2]);
//    try {
//        parsed = (Date.) sdf.parse(niz[3]);
//    } catch (ParseException e1) {
//        // TODO Auto-generated catch block
//        e1.printStackTrace();
//    }
//        try {
//            mPocetakOsiguranjaOd.setDate(niz[3]);
//            mTrajanjeOsiguranjaDo.setDate(niz[4]);
////        ListPodaciOPrijaviIOsiguranju.remove(1);
////        ListPodaciOPrijaviIOsiguranju.remove(Integer.parseInt(niz[0]));
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_ListPodaciOPrijaviIOsiguranjuValueChanged

    private void dodajPodaciOPrijaviIOsiguranjuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajPodaciOPrijaviIOsiguranjuBtnActionPerformed

        try {
            // TODO add your handling code here:
            if (!mPOPIOTrajanjeOsiguranjaDo.getSQLDate().toString().equals("1900-01-01")) {
                if (mPOPIOPocetakOsiguranjaOd.getDate().getTime() > mPOPIOTrajanjeOsiguranjaDo.getDate().getTime()) {
                    JOptionPane.showMessageDialog(this, "Datum OD je veci od datuma DO ....");
                    return;
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        PodaciOPrijaviIOsiguranju popio = new PodaciOPrijaviIOsiguranju();
        popio.setMesto(mPOPIOMestoOsiguranika.getSelectedItem().toString());
        popio.setSvojstvoOsiguranika(mPOPIOSvojstvoOsiguranika.getSelectedItem().toString());
        popio.setOpstina(mPOPIOOpstina.getSelectedItem().toString());
        try {
            popio.setPocetakOd(mPOPIOPocetakOsiguranjaOd.getSQLDate());
            popio.setTrajanjeDo(mPOPIOTrajanjeOsiguranjaDo.getSQLDate());
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }

        popio.setRbr(popioArray.size() + 1);
        popio.setJmbg(mJmbg.getText());

        popioArray.add(popio);

// mani se corava posla
//        DLM.addElement(popio.getRbr()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getMesto()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getSvojstvoOsiguranika()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getPocetakOd()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getTrajanjeDo());
//
//        ListPodaciOPrijaviIOsiguranju.setModel(DLM);
        FillListPodaciOPrijaviIOsiguranju();


    }//GEN-LAST:event_dodajPodaciOPrijaviIOsiguranjuBtnActionPerformed

    private void brisanjejPodaciOPrijaviIOsiguranjuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brisanjejPodaciOPrijaviIOsiguranjuBtnActionPerformed
        // TODO add your handling code here:
        //     morace ipak da prodje od pocetka i sve prikaze
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Da li ste sigurni?", "Potvrda",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
            return;
        } else if (response == JOptionPane.YES_OPTION) {
//      System.out.println("Yes button clicked");
        } else if (response == JOptionPane.CLOSED_OPTION) {
            return;
        }
        String aa = (String) ListPodaciOPrijaviIOsiguranju.getSelectedValue();
        String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);
        popioArray.remove(Integer.parseInt(niz[0]) - 1);

        // mani se corava posla
//        DefaultListModel model = (DefaultListModel) ListPodaciOPrijaviIOsiguranju.getModel();
//        int selectedIndex = ListPodaciOPrijaviIOsiguranju.getSelectedIndex();
//        if (selectedIndex != -1) {
//            model.remove(selectedIndex);
//        }
        // nakon brisanja ponovno popunjavanje
        FillListPodaciOPrijaviIOsiguranju();
//          model.removeElement(ListPodaciOPrijaviIOsiguranju.getSelectedValue()); 
    }//GEN-LAST:event_brisanjejPodaciOPrijaviIOsiguranjuBtnActionPerformed

    private void ListPodaciOPrijaviIOsiguranjuMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListPodaciOPrijaviIOsiguranjuMouseReleased
        // TODO add your handling code here:
        String aa = (String) ListPodaciOPrijaviIOsiguranju.getSelectedValue();
        String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);

        String startDate = niz[3];
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date date = null, date1 = null;
        try {
            date = sdf1.parse(niz[4]);
            date1 = sdf1.parse(niz[5]);
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.sql.Date sqlStartDate = new Date(date.getTime());
        try {
            mPOPIOPocetakOsiguranjaOd.setDate(date);
            mPOPIOTrajanjeOsiguranjaDo.setDate(date1);
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        mPOPIOMestoOsiguranika.setSelectedItem(niz[1]);
        mPOPIOSvojstvoOsiguranika.setSelectedItem(niz[2]);
        mPOPIOOpstina.setSelectedItem(niz[3]);
    }//GEN-LAST:event_ListPodaciOPrijaviIOsiguranjuMouseReleased

    private void obrisiPastoralnuSluzbuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrisiPastoralnuSluzbuBtnActionPerformed
        // TODO add your handling code here:
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Da li ste sigurni?", "Potvrda",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
            return;
        } else if (response == JOptionPane.YES_OPTION) {
//      System.out.println("Yes button clicked");
        } else if (response == JOptionPane.CLOSED_OPTION) {
            return;
        }
        String aa = (String) ListPodaciOPastoralnojSluzbi.getSelectedValue();
        String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);
        popsArray.remove(Integer.parseInt(niz[0]) - 1);

        // mani se corava posla
//        DefaultListModel model = (DefaultListModel) ListPodaciOPrijaviIOsiguranju.getModel();
//        int selectedIndex = ListPodaciOPrijaviIOsiguranju.getSelectedIndex();
//        if (selectedIndex != -1) {
//            model.remove(selectedIndex);
//        }
        // nakon brisanja ponovno popunjavanje
        FillListPodaciOPastoralnojSluzbi();
//          model.removeElement(ListPodaciOPrijaviIOsiguranju.getSelectedValue()); 
    }//GEN-LAST:event_obrisiPastoralnuSluzbuBtnActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        // TODO add your handling code here:

        if (!OK()) {
            return;
        }
        Statement stmt = null;
        ResultSet rs = null;
        //     `id`,
        String filename = mSlika.getText();
            boolean b = jCheckBox1.isSelected();
            mAktivan=0;
            if (b) mAktivan=1;
        filename = filename.replace("\\", "\\\\");

        String ab1 = mZupaNaziv.getSelectedItem().toString();
//        String ab2 = mUstanovaNaziv.getSelectedItem().toString();
//                String ab = mTipEntiteta.getSelectedItem().toString();
        try {
            sqlQuery11 = "UPDATE `licni_podaci`SET  "
                    //                    + "`oslovljavanje_sifra`, `oslovljavanje_id`, "
                    + "`oslovljavanje` = '" + mOslovljavanje.getSelectedItem().toString() + "', "
                    //                    + "`crkvena_titula_sifra`, `crkvena_titula_id`, "
                    + "`crkvena_titula` = '" + mCrkvenaTitula.getSelectedItem().toString() + "', "
                    //                    + "`akademska_titula_sifra`, `akademska_titula_id`, "
                    + "`akademska_titula`= '" + mAkademskaTitula.getSelectedItem().toString() + "', "
                    + "`jmbg` = '" + mJmbg.getText() + "', "
                    + "`ime` = '" + mIme.getText() + "', "
                    + "`prezime` = '" + mPrezime.getText() + "', "
                    + "`ime_u_lk` = '" + mImeULicnojKarti.getText() + "', "
                    + "`prezime_u_lk` = '" + mPrezimeULicnojKarti.getText() + "', "
                    + "`ime_oca` = '" + mImeOca.getText() + "', "
                    + "`ime_majke` = '" + mImeMajke.getText() + "', "
                    //                    + "`datum_rodjenja` = '" + mJmbg.getText() + "', "
                    //                    + "`jmbg` = '" + mJmbg.getText() + "', "

                    + "`datum_rodjenja` = '" + mDatumRodjenja.getSQLDate() + "', "
                    + "`datum_prestanka_sluzbe` = '" + mDatumPrestankaSluzbe.getSQLDate() + "', "
                    + "`aktivan` = '" + mAktivan + "', "
                    //                    + "`mesto_rodjenja_id`, "
                    + "`mesto_rodjenja` = '" + mMestoRodjenja.getSelectedItem().toString() + "', "
                    //                    + "`mesto_rodjenja_sifra`, "
                    //                    + "`srednje_obrazovanje_mesto_id`, `srednje_obrazovanje_mesto_sifra`, "
                    + "`srednje_obrazovanje_mesto` = '" + mSrednjeObrazovanjeMesto.getSelectedItem().toString() + "', "
                    //                    + "`srednje_obrazovanje_skola_id`, "
                    //                    + "`srednje_obrazovanje_skola_sifra`, "
                    + "`srednje_obrazovanje_skola` = '" + mSrednjeObrazovanjeSkola.getSelectedItem().toString() + "', "
                    + "`srednje_obrazovanje_od` = '" + mSrednjeObrazovanjePeriodOd.getText() + "', "
                    + "`srednje_obrazovanje_do` = '" + mSrednjeObrazovanjePeriodDo.getText() + "', "
                    //                    + "`brprotokola`, `pol`, `drzavarodj`, `id_drzavarodj`, `adresa`, `ptt`, `id_ptt`, "

                    + "`telefon` = '" + mTelefon.getText() + "', "
                    + "`e_mail` = '" + mEmail.getText() + "', "
                    //                    + "`status`, `id_status`, "
                    + "`drzavljanstvo` = '" + mDrzavljanstvo.getSelectedItem().toString() + "', "
                    //                    + "`id_drzavljanstvo`, "
                    + "`nacionalnost` = '" + mNacionalnost.getSelectedItem().toString() + "', "
                    + "`zupa_naziv` = '" + mZupaNaziv.getSelectedItem().toString() + "', "
                    + "`ustanova_naziv` = '" + mUstanovaNaziv.getSelectedItem().toString() + "', "
                    + "`tip_entiteta` = '" + mTipEntiteta.getSelectedItem().toString() + "', "
                    + "`banka` = '" + mBanka.getSelectedItem().toString() + "', "
                    + "`tekuci_racun` = '" + mTekuciRacun.getText() + "', "
                    //                    + "`id_nacionalnost`, "
                    + "`slika` = '" + filename + "', " // mSlika.getText() + "', "  dabi dodao dva slesa
                    //                    + "`banka_isplata`, `id_banka_isplata`, "
                    //                    + "`racun_isplate`, `opstina`, `id_opstina`, `sifra`, "
                    //                    + "`bogoslovija_mesto_id`, `bogoslovija_mesto_sifra`, "

                    + "`bogoslovija_mesto` = '" + mBogoslovijaMesto.getSelectedItem().toString() + "', "
                    //                    + "`bogoslovija_mesto1_id`, "
                    //                    + "`bogoslovija_mesto1_sifra`, "
                    + "`bogoslovija_mesto1` = '" + mBogoslovijaMesto1.getSelectedItem().toString() + "', "
                    //                    + "`bogoslovija_mesto2_id`, "
                    //                    + "`bogoslovija_mesto2_sifra`, "
                    + "`bogoslovija_mesto2` = '" + mBogoslovijaMesto2.getSelectedItem().toString() + "', "
                    + "`bogoslovija_period_od`= '" + mBogoslovijaPeriodOd.getText() + "', "
                    + "`bogoslovija_period_do`= '" + mBogoslovijaPeriodDo.getText() + "', "
                    + "`bogoslovija_period_od1`= '" + mBogoslovijaPeriodOd1.getText() + "', "
                    + "`bogoslovija_period_do1`= '" + mBogoslovijaPeriodDo1.getText() + "', "
                    + "`bogoslovija_period_od2`= '" + mBogoslovijaPeriodOd2.getText() + "', "
                    + "`bogoslovija_period_do2`= '" + mBogoslovijaPeriodDo2.getText() + "', "
                    //                    + "`djakonat_mesto_id`, "
                    //                    + "`djakonat_mesto_sifra`, "

                    + "`djakonat_mesto`= '" + mDjakonatMesto.getSelectedItem().toString() + "', "
                    + "`djakonat_datum`= '" + mDjakonatDatum.getSQLDate() + "', "
                    //                    + "`djakonat_zareditelj_id`, "
                    //                    + "`djakonat_zareditelj_sifra`, "
                    + "`djakonat_zareditelj`= '" + mDjakonatZareditelj.getSelectedItem().toString() + "', "
                    //                    + "`prezbiterat_mesto_id`, "
                    //                    + "`prezbiterat_mesto_sifra`, "
                    + "`prezbiterat_mesto`= '" + mPrezbiteratMesto.getSelectedItem().toString() + "', "
                    + "`prezbiterat_datum`= '" + mPrezbiteratDatum.getSQLDate() + "', "
                    //                    + "`prezbiterat_zareditelj_id`, `prezbiterat_zareditelj_sifra`, "
                    + "`prezbiterat_zareditelj`= '" + mPrezbiteratZareditelj.getSelectedItem().toString() + "', "
                    //                    + "`dodiplomski_studij_mesto_id`, `dodiplomski_studij_mesto_sifra`, "
                    + "`dodiplomski_studij_mesto`= '" + mDodiplomskiStudijMesto.getSelectedItem().toString() + "', "
                    //                    + "`dodiplomski_studij_naziv_ustanove_id`, `"
                    //                    + "dodiplomski_studij_naziv_ustanove_sifra`, "
                    + "`dodiplomski_studij_naziv_ustanove`= '" + mDodiplomskiStudijUstanova.getSelectedItem().toString() + "', "
                    + "`dodiplomski_studij_period_od`= '" + mDodiplomskiStudijPeriodOd.getText() + "', "
                    + "`dodiplomski_studij_period_do`= '" + mDodiplomskiStudijPeriodDo.getText() + "', "
                    //                    + "`magisterij_mesto_id`, `magisterij_mesto_sifra`, "
                    + "`magisterij_mesto`= '" + mMagisterijMesto.getSelectedItem().toString() + "', "
                    //                    + "`magisterij_naziv_ustanove_id`, `magisterij_naziv_ustanove_sifra`, "
                    + "`magisterij_naziv_ustanove`= '" + mMagisterijNazivUstanove.getSelectedItem().toString() + "', "
                    + "`magisterij_period_od`= '" + mMagisterijPeriodOd.getText() + "', "
                    + "`magisterij_period_do`= '" + mMagisterijPeriodDo.getText() + "', "
                    //                    + "`doktorat_mesto_id`, `doktorat_mesto_sifra`, "
                    + "`doktorat_mesto`= '" + mDoktoratMesto.getSelectedItem().toString() + "', "
                    //                    + "`doktorat_naziv_ustanove_id`, `doktorat_naziv_ustanove_sifra`, "
                    + "`doktorat_naziv_ustanove`= '" + mDoktoratNazivUstanove.getSelectedItem().toString() + "', "
                    + "`doktorat_period_od`= '" + mDoktoratPeriodOd.getText() + "', "
                    + "`doktorat_period_do`= '" + mDoktoratPeriodDo.getText() + "'"
                    + " where id = '" + mId.getText() + "'";

            System.out.println(sqlQuery11);

            stmt = conn.createStatement();
            PreparedStatement ps = conn.prepareStatement(sqlQuery11);
//            ,
//                    Statement.RETURN_GENERATED_KEYS);
            ps.execute();

//            rs = ps.getGeneratedKeys();
            String generatedKey = mId.getText();
//            if (rs.next()) {
//                generatedKey = rs.getInt(1);
//            }
//            System.out.println("Inserted record's ID: " + generatedKey);
//            System.out.println(sqlQuery);
//  mMestoRodjenjastmt.executeUpdate(sqlQuery);
//            if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
//                String sqlQuery1 = " insert into podaci_o_pastoralnoj_sluzbi (user_id, jmbg, mesto_sluzbe, "
//                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
//                        + ") "
//                        + "values ('" + generatedKey + "', '"
//                        + mJmbg.getText() + "', '"
//                        + mPOPSMestoSluzbe.getSelectedItem().toString() + "','"
//                        + mPOPSNazivUstanove.getSelectedItem().toString() + "','"
//                        + mPOPSNazivZupe.getSelectedItem().toString() + "','"
//                        + mPOPSSvojstvo.getSelectedItem().toString() + "','"
//                        + mPOPSDekret.getText() + "','"
//                        + mPOPSPocetakSluzbeOd.getSQLDate() + "','"
//                        + mPOPSTrajanjeSluzbeDo.getSQLDate()
//                        + "')";
//
//                System.out.println(sqlQuery1);
//
//                stmt.executeUpdate(sqlQuery1);
//            }
            //    conn.commit();
            // citanje niza i upis u tabelu podaci o pastoralnoj sluzbi
//            String aa = (String) ListPodaciOPastoralnojSluzbi.getSelectedValue();
//            String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);  
//            int mUser_id = generatedKey;

            String sqlQuery1 = "delete from podaci_o_pastoralnoj_sluzbi where user_id = '" + mId.getText() + "'";

            System.out.println(sqlQuery1);
            stmt.executeUpdate(sqlQuery1);

            for (PodaciOPastoralnojSluzbi u : popsArray) {

                System.out.println(u);
                u.toString();
                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro

                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

                sqlQuery1 = " insert into podaci_o_pastoralnoj_sluzbi (user_id, jmbg, rbr, mesto_sluzbe, "
                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        //                        + u.toString() + "', '"
                        + u.getRbr() + "', '"
                        + u.getMestoSluzbe() + "','"
                        + u.getNazivUstanove() + "','"
                        + u.getNazivZupe() + "','"
                        + u.getSvojstvo() + "','"
                        + u.getDekret() + "','"
                        + formatter.format(u.getPocetakSluzbeOd()) + "','"
                        + formatter.format(u.getTrajanjeSluzbeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);
//             }
//            u.setRbr(a);
//            ODLM.addElement(u.getRbr()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
//            );
////            System.out.println(u.getId() + ":" + u.getMesto());
//            a++;
            }

            sqlQuery1 = "delete from podaci_o_dodatnoj_sluzbi where user_id = '" + mId.getText() + "'";

            System.out.println(sqlQuery1);
            stmt.executeUpdate(sqlQuery1);

            for (PodaciODodatnojSluzbi u : podsArray) {

                System.out.println(u);
                u.toString();
                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro

                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

                sqlQuery1 = " insert into podaci_o_dodatnoj_sluzbi (user_id, jmbg, rbr, mesto_sluzbe, "
                        + "naziv_ustanove, naziv_zupe, svojstvo, dekret, pocetak_sluzbe_od, trajanje_sluzbe_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        //                        + u.toString() + "', '"
                        + u.getRbr() + "', '"
                        + u.getMestoSluzbe() + "','"
                        + u.getNazivUstanove() + "','"
                        + u.getNazivZupe() + "','"
                        + u.getSvojstvo() + "','"
                        + u.getDekret() + "','"
                        + formatter.format(u.getPocetakSluzbeOd()) + "','"
                        + formatter.format(u.getTrajanjeSluzbeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);
//             }
//            u.setRbr(a);
//            ODLM.addElement(u.getRbr()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
//                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
//            );
////            System.out.println(u.getId() + ":" + u.getMesto());
//            a++;
            }

            sqlQuery1 = "delete from podaci_o_prijavi_i_osiguranju where user_id = '" + mId.getText() + "'";

            System.out.println(sqlQuery1);
            stmt.executeUpdate(sqlQuery1);

            for (PodaciOPrijaviIOsiguranju u : popioArray) {

                //     mora da dobije novi redni broj u klasi ako je bilo brisanja
                //     u arrayu je svakako dobro
//             if (!mPOPSMestoSluzbe.getSelectedItem().toString().isEmpty()) {
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
//                String odd = formatter.format(u.getPocetakSluzbeOd());
//                String dod = formatter.format(u.getTrajanjeSluzbeDo());
                sqlQuery1 = " insert into podaci_o_prijavi_i_osiguranju (user_id, jmbg, rbr, mesto, "
                        + " svojstvo_osiguranika, opstina, pocetak_od, trajanje_do  "
                        + ") "
                        + "values ('" + generatedKey + "', '"
                        + u.getJmbg() + "', '"
                        + u.getRbr() + "','"
                        //                        + u.toString() + "', '"
                        + u.getMesto() + "','"
                        + u.getSvojstvoOsiguranika() + "','"
                        + u.getOpstina() + "','"
                        + formatter.format(u.getPocetakOd()) + "','"
                        + formatter.format(u.getTrajanjeDo())
                        + "')";

                System.out.println(sqlQuery1);
                stmt.executeUpdate(sqlQuery1);

            }

            JOptionPane.showMessageDialog(null, "Podaci su ispravljeni .... ");

            upisiZaKraj(); 
//            this.dispose(); ne zatvara formu posle izmene
//            nuliranjeForme();

//        } catch (SQLException | HeadlessException e) {
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

            try {
                conn.rollback();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
//          Logger.getLogger(putniNaloziZ.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                    rs = null;
                } catch (Exception e) {
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                    stmt = null;
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void dodajDodatnuSluzbuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajDodatnuSluzbuBtnActionPerformed
        try {
            // TODO add your handling code here:
            if (!mPODSTrajanjeSluzbeDo.getSQLDate().toString().equals("1900-01-01")) {
                if (mPODSPocetakSluzbeOd.getDate().getTime() > mPODSTrajanjeSluzbeDo.getDate().getTime()) {
                    JOptionPane.showMessageDialog(this, "Datum OD je veci od datuma DO ....");
                    return;
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        PodaciODodatnojSluzbi pods = new PodaciODodatnojSluzbi();
        pods.setJmbg(mJmbg.getText());
        pods.setMestoSluzbe(mPODSMestoSluzbe.getSelectedItem().toString());
        pods.setNazivUstanove(mPODSNazivUstanove.getSelectedItem().toString());
        pods.setNazivZupe(mPODSNazivZupe.getSelectedItem().toString());
        pods.setSvojstvo(mPODSSvojstvo.getSelectedItem().toString());
        pods.setDekret(mPODSDekret.getText());
        try {
            pods.setPocetakSluzbeOd(mPODSPocetakSluzbeOd.getSQLDate());
            pods.setTrajanjeSluzbeDo(mPODSTrajanjeSluzbeDo.getSQLDate());
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }

//        popsArray.add(pops);
//        FillList();
//                PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
//                pops.setMestoSluzbe(mPOPSMestoSluzbe.getSelectedItem().toString());
//                pops.setNazivUstanove(mPOPSNazivUstanove.getSelectedItem().toString());
//                pops.setNazivZupe(mPOPSNazivZupe.getSelectedItem().toString());
//                pops.setSvojstvo(mPOPSSvojstvo.getSelectedItem().toString());
//                
//        pops.setMesto(mPOPIOMestoOsiguranika.getSelectedItem().toString());
//        pops.setSvojstvoOsiguranika(mPOPIOSvojstvoOsiguranika.getSelectedItem().toString());
//
//        try {
//            popio.setPocetakOd(mPOPIOPocetakOsiguranjaOd.getSQLDate());
//            popio.setTrajanjeDo(mPOPIOTrajanjeOsiguranjaDo.getSQLDate());
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
        pods.setRbr(podsArray.size() + 1);
        pods.setJmbg(mJmbg.getText());

        podsArray.add(pods);

// mani se corava posla
//        DLM.addElement(popio.getRbr()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getMesto()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getSvojstvoOsiguranika()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getPocetakOd()
//                + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR
//                + popio.getTrajanjeDo());
//
//        ListPodaciOPrijaviIOsiguranju.setModel(DLM);
        FillListPodaciODodatnojSluzbi();


    }//GEN-LAST:event_dodajDodatnuSluzbuBtnActionPerformed

    private void ListPodaciODodatnojSluzbiValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListPodaciODodatnojSluzbiValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ListPodaciODodatnojSluzbiValueChanged

    private void obrisiDodatnuSluzbuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obrisiDodatnuSluzbuBtnActionPerformed
        // TODO add your handling code here:
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Da li ste sigurni?", "Potvrda",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
            return;
        } else if (response == JOptionPane.YES_OPTION) {
//      System.out.println("Yes button clicked");
        } else if (response == JOptionPane.CLOSED_OPTION) {
            return;
        }
        String aa = (String) ListPodaciODodatnojSluzbi.getSelectedValue();
        String[] niz = aa.split(AsoftComboBox.COMBOBOX_ITEM_SEPARATOR);
        podsArray.remove(Integer.parseInt(niz[0]) - 1);

        // mani se corava posla
//        DefaultListModel model = (DefaultListModel) ListPodaciOPrijaviIOsiguranju.getModel();
//        int selectedIndex = ListPodaciOPrijaviIOsiguranju.getSelectedIndex();
//        if (selectedIndex != -1) {
//            model.remove(selectedIndex);
//        }
        // nakon brisanja ponovno popunjavanje
        FillListPodaciODodatnojSluzbi();
    }//GEN-LAST:event_obrisiDodatnuSluzbuBtnActionPerformed

    final void FillListPodaciOPrijaviIOsiguranju() {

        // ovo bi trebalo da je sortiranje
//        int min;
//        PodaciOPrijaviIOsiguranju tmp;
//        for (int i = 0; i < popioArray.size(); i++) {
//            min = i;
//            for (int u = i; u < popioArray.size(); u++) {
//                if (((PodaciOPrijaviIOsiguranju) popioArray.get(u)).getId() < ((PodaciOPrijaviIOsiguranju) popioArray.get(min)).getId()) {
//                    min = u;
//                }
//            }
//            tmp = (PodaciOPrijaviIOsiguranju) popioArray.get(min);
//            popioArray.set(min, (PodaciOPrijaviIOsiguranju) popioArray.get(i));
//            popioArray.set(i, tmp);
//        }
        ListPodaciOPrijaviIOsiguranju.removeAll();
        DefaultListModel ODLM = new DefaultListModel();
        int a = 1;
        for (PodaciOPrijaviIOsiguranju u : popioArray) {

            //     mora da dobije novi redni broj u klasi ako je bilo brisanja
            //     u arrayu je svakako dobro
            u.setRbr(a);
            ODLM.addElement(u.getRbr()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMesto()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvoOsiguranika()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getOpstina()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakOd()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeDo());
//            System.out.println(u.getId() + ":" + u.getMesto());
            a++;
        }
        ListPodaciOPrijaviIOsiguranju.setModel(ODLM);
//        try {
//            Statement stmt = conn.createStatement();
//
//            String sqlQuery = " select * from licni_podaci ";
//            ResultSet rs = stmt.executeQuery(sqlQuery);
//        DefaultListModel DLM = new DefaultListModel();

//        for (int i = 0; i < popioArray.size(); i++) {
//            DLM.addElement(popioArray.get(i));
//            DLM.addElement(popio.get(i));
//            System.out.println(popioArray.get(i));
//        }
//            while (rs.next()) {
//                DLM.addElement(rs.getString(1)
//                        + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + rs.getString(2)
//                        + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + rs.getString(3)
//                        + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + rs.getString(4)
//                );
//            }
//        ListPodaciOPrijaviIOsiguranju.setModel(DLM);
//        } catch (SQLException ex) {
//            Logger.getLogger(SearchWithTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    final void FillListPodaciOPastoralnojSluzbi() {

        ListPodaciOPastoralnojSluzbi.removeAll();
        DefaultListModel ODLM = new DefaultListModel();
        int a = 1;
        for (PodaciOPastoralnojSluzbi u : popsArray) {

            //     mora da dobije novi redni broj u klasi ako je bilo brisanja
            //     u arrayu je svakako dobro
            u.setRbr(a);
            ODLM.addElement(u.getRbr()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
            );
//            System.out.println(u.getId() + ":" + u.getMesto());
            a++;
        }
        ListPodaciOPastoralnojSluzbi.setModel(ODLM);

    }

    final void FillListPodaciODodatnojSluzbi() {

        ListPodaciODodatnojSluzbi.removeAll();
        DefaultListModel ODLM = new DefaultListModel();
        int a = 1;
        for (PodaciODodatnojSluzbi u : podsArray) {

            //     mora da dobije novi redni broj u klasi ako je bilo brisanja
            //     u arrayu je svakako dobro
            u.setRbr(a);
            ODLM.addElement(u.getRbr()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getMestoSluzbe()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivUstanove()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getNazivZupe()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getSvojstvo()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getDekret()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getPocetakSluzbeOd()
                    + AsoftComboBox.COMBOBOX_ITEM_SEPARATOR + u.getTrajanjeSluzbeDo()
            );
//            System.out.println(u.getId() + ":" + u.getMesto());
            a++;
        }
        ListPodaciODodatnojSluzbi.setModel(ODLM);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addPersonalTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addPersonalTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addPersonalTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addPersonalTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addPersonalTab().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AttachBtn;
    private javax.swing.JList ListPodaciODodatnojSluzbi;
    private javax.swing.JList ListPodaciOPastoralnojSluzbi;
    private javax.swing.JList ListPodaciOPrijaviIOsiguranju;
    private javax.swing.JButton OdustaniBtn;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton brisanjejPodaciOPrijaviIOsiguranjuBtn;
    private javax.swing.JButton dodajDodatnuSluzbuBtn;
    private javax.swing.JButton dodajPastoralnuSluzbuBtn;
    private javax.swing.JButton dodajPodaciOPrijaviIOsiguranjuBtn;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox mAkademskaTitula;
    private javax.swing.JComboBox mBanka;
    private javax.swing.JComboBox mBogoslovijaMesto;
    private javax.swing.JComboBox mBogoslovijaMesto1;
    private javax.swing.JComboBox mBogoslovijaMesto2;
    private javax.swing.JTextField mBogoslovijaPeriodDo;
    private javax.swing.JTextField mBogoslovijaPeriodDo1;
    private javax.swing.JTextField mBogoslovijaPeriodDo2;
    private javax.swing.JTextField mBogoslovijaPeriodOd;
    private javax.swing.JTextField mBogoslovijaPeriodOd1;
    private javax.swing.JTextField mBogoslovijaPeriodOd2;
    private javax.swing.JComboBox mCrkvenaTitula;
    private org.asoft.library.picker.AsoftHistoryDatePicker mDatumPrestankaSluzbe;
    private org.asoft.library.picker.AsoftHistoryDatePicker mDatumRodjenja;
    private org.asoft.library.picker.AsoftHistoryDatePicker mDjakonatDatum;
    private javax.swing.JComboBox mDjakonatMesto;
    private javax.swing.JComboBox mDjakonatZareditelj;
    private javax.swing.JComboBox mDodiplomskiStudijMesto;
    private javax.swing.JTextField mDodiplomskiStudijPeriodDo;
    private javax.swing.JTextField mDodiplomskiStudijPeriodOd;
    private javax.swing.JComboBox mDodiplomskiStudijUstanova;
    private javax.swing.JComboBox mDoktoratMesto;
    private javax.swing.JComboBox mDoktoratNazivUstanove;
    private javax.swing.JTextField mDoktoratPeriodDo;
    private javax.swing.JTextField mDoktoratPeriodOd;
    private javax.swing.JComboBox mDrzavljanstvo;
    private javax.swing.JTextField mEmail;
    private javax.swing.JTextField mId;
    private javax.swing.JTextField mIme;
    private javax.swing.JTextField mImeMajke;
    private javax.swing.JTextField mImeOca;
    private javax.swing.JTextField mImeULicnojKarti;
    private javax.swing.JTextField mJmbg;
    private javax.swing.JLabel mLabelSlika;
    private javax.swing.JComboBox mMagisterijMesto;
    private javax.swing.JComboBox mMagisterijNazivUstanove;
    private javax.swing.JTextField mMagisterijPeriodDo;
    private javax.swing.JTextField mMagisterijPeriodOd;
    private javax.swing.JComboBox mMestoRodjenja;
    private javax.swing.JComboBox mNacionalnost;
    private javax.swing.JComboBox mOslovljavanje;
    private javax.swing.JTextField mPODSDekret;
    private javax.swing.JComboBox mPODSMestoSluzbe;
    private javax.swing.JComboBox mPODSNazivUstanove;
    private javax.swing.JComboBox mPODSNazivZupe;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPODSPocetakSluzbeOd;
    private javax.swing.JComboBox mPODSSvojstvo;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPODSTrajanjeSluzbeDo;
    private javax.swing.JComboBox mPOPIOMestoOsiguranika;
    private javax.swing.JComboBox mPOPIOOpstina;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPOPIOPocetakOsiguranjaOd;
    private javax.swing.JComboBox mPOPIOSvojstvoOsiguranika;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPOPIOTrajanjeOsiguranjaDo;
    private javax.swing.JTextField mPOPSDekret;
    private javax.swing.JComboBox mPOPSMestoSluzbe;
    private javax.swing.JComboBox mPOPSNazivUstanove;
    private javax.swing.JComboBox mPOPSNazivZupe;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPOPSPocetakSluzbeOd;
    private javax.swing.JComboBox mPOPSSvojstvo;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPOPSTrajanjeSluzbeDo;
    private org.asoft.library.picker.AsoftHistoryDatePicker mPrezbiteratDatum;
    private javax.swing.JComboBox mPrezbiteratMesto;
    private javax.swing.JComboBox mPrezbiteratZareditelj;
    private javax.swing.JTextField mPrezime;
    private javax.swing.JTextField mPrezimeULicnojKarti;
    private javax.swing.JTextField mSlika;
    private javax.swing.JComboBox mSrednjeObrazovanjeMesto;
    private javax.swing.JTextField mSrednjeObrazovanjePeriodDo;
    private javax.swing.JTextField mSrednjeObrazovanjePeriodOd;
    private javax.swing.JComboBox mSrednjeObrazovanjeSkola;
    private javax.swing.JTextField mTekuciRacun;
    private javax.swing.JTextField mTelefon;
    private javax.swing.JComboBox mTipEntiteta;
    private javax.swing.JComboBox mUstanovaNaziv;
    private javax.swing.JComboBox mZupaNaziv;
    private javax.swing.JButton obrisiDodatnuSluzbuBtn;
    private javax.swing.JButton obrisiPastoralnuSluzbuBtn;
    // End of variables declaration//GEN-END:variables

    private boolean OK() {
        if (mJmbg.getText().equals("") || mJmbg.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Polje JMBG ne sme biti prazno ....");
            return false;
        }
        if (mIme.getText().equals("") || mIme.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Polje IME ne sme biti prazno ....");
            return false;
        }
        if (mPrezime.getText().equals("") || mPrezime.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Polje PREZIME ne sme biti prazno ....");
            return false;
        }
//        System.out.println("tip entiteta " + mTipEntiteta.getSelectedItem().toString());
//        if (mTipEntiteta.getSelectedItem().toString().equals("")
//                || mTipEntiteta.getSelectedItem().toString().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Polje tipEntiteta ne sme biti prazno ....");
//            return false;
//        }
        return true;
    }

    public static void setUIFont(javax.swing.plaf.FontUIResource f) {
        java.util.Enumeration keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof javax.swing.plaf.FontUIResource) {
                UIManager.put(key, f);
            }
        }
    }

    private void nuliranjeForme() {
        try {
            mLabelSlika.setIcon(null);
            mJmbg.setText("");
            mIme.setText("");
            mPrezime.setText("");
            mImeOca.setText("");
            mImeMajke.setText("");
            mId.setText("");
//            mAdresa.setText("");
//            mMesto.setText("");
            mDatumRodjenja.setDate(AsoftDate.EMPTY_DATE);
            mDatumPrestankaSluzbe.setDate(AsoftDate.EMPTY_DATE);
            jCheckBox1.setSelected(true);
            mMestoRodjenja.setSelectedItem(null);
            mDrzavljanstvo.setSelectedItem(null);
            mTelefon.setText("");
            mEmail.setText("");
            mOslovljavanje.setSelectedItem(null);
            mCrkvenaTitula.setSelectedItem(null);
            mAkademskaTitula.setSelectedItem(null);
            mNacionalnost.setSelectedItem(null);
            mZupaNaziv.setSelectedItem(null);
            mUstanovaNaziv.setSelectedItem(null);
            mTipEntiteta.setSelectedItem(null);
            mBanka.setSelectedItem(null);
            mTekuciRacun.setText("");
            mDrzavljanstvo.setSelectedItem(null);
            mTelefon.setText("");
            mEmail.setText("");
            mImeULicnojKarti.setText("");
            mIme.setText("");
            mPrezimeULicnojKarti.setText("");
            String PersonIcon = service.uzmiParametar.uzmiParametar(conn, "default_slika");
            mSlika.setText(PersonIcon);

            mSrednjeObrazovanjeMesto.setSelectedItem(null);
            mSrednjeObrazovanjeSkola.setSelectedItem(null);
            mSrednjeObrazovanjePeriodOd.setText("");
            mSrednjeObrazovanjePeriodDo.setText("");
            mBogoslovijaMesto2.setSelectedItem(null);
            mBogoslovijaPeriodOd2.setText("");
            mBogoslovijaPeriodDo2.setText("");
            mDodiplomskiStudijMesto.setSelectedItem(null);
            mDodiplomskiStudijUstanova.setSelectedItem(null);
            mDodiplomskiStudijPeriodOd.setText("");
            mDodiplomskiStudijPeriodDo.setText("");
            mBogoslovijaMesto.setSelectedItem(null);
            mBogoslovijaPeriodOd.setText("");
            mBogoslovijaPeriodDo.setText("");
            mDjakonatMesto.setSelectedItem(null);
            mDjakonatDatum.setDate(AsoftDate.EMPTY_DATE);
            mDjakonatZareditelj.setSelectedItem(null);
            mMagisterijMesto.setSelectedItem(null);
            mMagisterijNazivUstanove.setSelectedItem(null);
            mMagisterijPeriodOd.setText("");
            mMagisterijPeriodDo.setText("");
            mBogoslovijaMesto1.setSelectedItem(null);
            mBogoslovijaPeriodOd1.setText("");
            mBogoslovijaPeriodDo1.setText("");
            mPrezbiteratMesto.setSelectedItem(null);
            mPrezbiteratDatum.setDate(AsoftDate.EMPTY_DATE);
            mPrezbiteratZareditelj.setSelectedItem(null);
            mDoktoratMesto.setSelectedItem(null);
            mDoktoratNazivUstanove.setSelectedItem(null);
            mDoktoratPeriodOd.setText("");
            mDoktoratPeriodDo.setText("");

            mPOPSMestoSluzbe.setSelectedItem(null);
            mPOPSNazivUstanove.setSelectedItem(null);
            mPOPSNazivZupe.setSelectedItem(null);
            mPOPSSvojstvo.setSelectedItem(null);
            mPOPSDekret.setText("");
            mPOPSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
            mPOPSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);

//            DefaultListModel listModel = (DefaultListModel) ListPodaciOPastoralnojSluzbi.getModel();
//            listModel.removeAllElements();
            popsArray.clear();
            FillListPodaciOPastoralnojSluzbi();
//            ListPodaciOPastoralnojSluzbi.removeAll();

            mPODSMestoSluzbe.setSelectedItem(null);
            mPODSNazivUstanove.setSelectedItem(null);
            mPODSNazivZupe.setSelectedItem(null);
            mPODSSvojstvo.setSelectedItem(null);
            mPODSDekret.setText("");
            mPODSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
            mPODSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);

//            DefaultListModel listModel = (DefaultListModel) ListPodaciOPastoralnojSluzbi.getModel();
//            listModel.removeAllElements();
            podsArray.clear();
            FillListPodaciODodatnojSluzbi();
//            ListPodaciOPastoralnojSluzbi.removeAll();

            mPOPIOMestoOsiguranika.setSelectedItem(null);
            mPOPIOSvojstvoOsiguranika.setSelectedItem(null);
            mPOPIOOpstina.setSelectedItem(null);
            mPOPIOPocetakOsiguranjaOd.setDate(AsoftDate.EMPTY_DATE);
            mPOPIOTrajanjeOsiguranjaDo.setDate(AsoftDate.EMPTY_DATE);
            popioArray.clear();
            FillListPodaciOPrijaviIOsiguranju();
//            DefaultListModel listModel1 = (DefaultListModel) ListPodaciOPrijaviIOsiguranju.getModel();
//            listModel1.removeAllElements();

//            ListPodaciOPrijaviIOsiguranju.removeAll();
        } catch (ParseException ex) {

            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void napuniEkran(String id) throws SQLException {

        try {
            Statement stmt = conn.createStatement();
            String sqlQuery = " select * from licni_podaci where id like '" + id + "'";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            while (rs.next()) {
                String cc = rs.getString("tip_entiteta");
                if (rs.getString("slika") != null && !rs.getString("slika").isEmpty()) {
//                Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource(rs.getString("slika")));
                }

            mAktivan=rs.getInt("aktivan");
            if (mAktivan==1)
                    jCheckBox1.setSelected(true);
                    else
                    jCheckBox1.setSelected(false);

//                mLabelSlika.setIcon(image);
                mJmbg.setText(rs.getString("jmbg"));
                mIme.setText(rs.getString("ime"));
                mPrezime.setText(rs.getString("prezime"));
                mImeOca.setText(rs.getString("ime_oca"));
                mImeMajke.setText(rs.getString("ime_majke"));
                mId.setText(rs.getString("id"));
//            mAdresa.setText("");
//            mMesto.setText("");
//                new AsoftHistoryDatePicker(rs.getString("datum_rodjenja"));
                mDatumRodjenja.setDate(rs.getDate("datum_rodjenja"));
                mDatumPrestankaSluzbe.setDate(rs.getDate("datum_prestanka_sluzbe"));
                mMestoRodjenja.setSelectedItem(rs.getString("mesto_rodjenja"));
                mDrzavljanstvo.setSelectedItem(rs.getString("drzavljanstvo"));
                mTelefon.setText(rs.getString("telefon"));
                mEmail.setText(rs.getString("e_mail"));
                String a = rs.getString("oslovljavanje");
                mOslovljavanje.setSelectedItem(rs.getString("oslovljavanje"));
                mCrkvenaTitula.setSelectedItem(rs.getString("crkvena_titula"));
                mAkademskaTitula.setSelectedItem(rs.getString("akademska_titula"));
                mNacionalnost.setSelectedItem(rs.getString("nacionalnost"));
                mZupaNaziv.setSelectedItem(rs.getString("zupa_naziv"));
                mUstanovaNaziv.setSelectedItem(rs.getString("ustanova_naziv"));
                mTipEntiteta.setSelectedItem(rs.getString("tip_entiteta"));
                mBanka.setSelectedItem(rs.getString("banka"));
                mTekuciRacun.setText(rs.getString("tekuci_racun"));
                mDrzavljanstvo.setSelectedItem(rs.getString("drzavljanstvo"));
                mTelefon.setText(rs.getString("telefon"));
                mEmail.setText(rs.getString("e_mail"));
                mImeULicnojKarti.setText(rs.getString("ime_u_lk"));
                mIme.setText(rs.getString("ime"));
                mPrezimeULicnojKarti.setText(rs.getString("prezime_u_lk"));
                mPrezime.setText(rs.getString("prezime"));
                mSlika.setText(rs.getString("slika"));

                mSrednjeObrazovanjeMesto.setSelectedItem(rs.getString("srednje_obrazovanje_mesto"));
                mSrednjeObrazovanjeSkola.setSelectedItem(rs.getString("srednje_obrazovanje_skola"));
                mSrednjeObrazovanjePeriodOd.setText(rs.getString("srednje_obrazovanje_od"));
                mSrednjeObrazovanjePeriodDo.setText(rs.getString("srednje_obrazovanje_do"));
                mBogoslovijaMesto2.setSelectedItem(rs.getString("bogoslovija_mesto2"));
                mBogoslovijaPeriodOd2.setText(rs.getString("bogoslovija_period_od2"));
                mBogoslovijaPeriodDo2.setText(rs.getString("bogoslovija_period_do2"));
                mDodiplomskiStudijMesto.setSelectedItem(rs.getString("dodiplomski_studij_mesto"));
                mDodiplomskiStudijUstanova.setSelectedItem(rs.getString("dodiplomski_studij_naziv_ustanove"));
                mDodiplomskiStudijPeriodOd.setText(rs.getString("dodiplomski_studij_period_od"));
                mDodiplomskiStudijPeriodDo.setText(rs.getString("dodiplomski_studij_period_do"));
                mBogoslovijaMesto.setSelectedItem(rs.getString("bogoslovija_mesto"));
                mBogoslovijaPeriodOd.setText(rs.getString("bogoslovija_period_od"));
                mBogoslovijaPeriodDo.setText(rs.getString("bogoslovija_period_do"));
                mDjakonatMesto.setSelectedItem(rs.getString("djakonat_mesto"));
                mDjakonatDatum.setDate(rs.getDate("djakonat_datum"));
                mDjakonatZareditelj.setSelectedItem(rs.getString("djakonat_zareditelj"));
                mMagisterijMesto.setSelectedItem(rs.getString("magisterij_mesto"));
                mMagisterijNazivUstanove.setSelectedItem(rs.getString("magisterij_naziv_ustanove"));
                mMagisterijPeriodOd.setText(rs.getString("magisterij_period_od"));
                mMagisterijPeriodDo.setText(rs.getString("magisterij_period_do"));
                mBogoslovijaMesto1.setSelectedItem(rs.getString("bogoslovija_mesto1"));
                mBogoslovijaPeriodOd1.setText(rs.getString("bogoslovija_period_od1"));
                mBogoslovijaPeriodDo1.setText(rs.getString("bogoslovija_period_do1"));
                mPrezbiteratMesto.setSelectedItem(rs.getString("prezbiterat_mesto"));
                mPrezbiteratDatum.setDate(rs.getDate("prezbiterat_datum"));
                mPrezbiteratZareditelj.setSelectedItem(rs.getString("prezbiterat_zareditelj"));
                mDoktoratMesto.setSelectedItem(rs.getString("doktorat_mesto"));
                mDoktoratNazivUstanove.setSelectedItem(rs.getString("doktorat_naziv_ustanove"));
                mDoktoratPeriodOd.setText(rs.getString("doktorat_period_od"));
                mDoktoratPeriodDo.setText(rs.getString("doktorat_period_do"));

//                    byte[] img = rs.getBytes("photo");
//
//
//                    //Resize The ImageIcon
//                    ImageIcon image1 = new ImageIcon(img);
//                    Image im = image1.getImage();
//                    Image myImg = im.getScaledInstance( mLabelSlika.getWidth(),  mLabelSlika.getHeight(),Image.SCALE_SMOOTH);
//                    ImageIcon newImage = new ImageIcon(myImg);
//                    mLabelSlika.setIcon(newImage);
//                    ,
//                 Blob filenameBlob = rs.getBlob("photo");
//         byte[] content = filenameBlob.getBytes(1L,(int)filenameBlob.length());
//         ImageIcon ik = new ImageIcon(content);
//         Image img = ik.getImage();
//         Image newimg = img.getScaledInstance(mLabelSlika.getWidth(), mLabelSlika.getHeight(), java.awt.Image.SCALE_SMOOTH);
//         ik = new ImageIcon(newimg);
//         mLabelSlika.setIcon(ik);
//         mLabelSlika.repaint();
//                String filename = "d:\\photo27.jpg";
                String filename = rs.getString("slika");
                mSlika.setText(filename);
                ImageIcon icon = new ImageIcon(filename);
                mLabelSlika.setIcon(icon);

                // polja na ekranu pops su napunjena u napuniListuOPastoralnojSluzbi(id);
//                mPOPSMestoSluzbe.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPSNazivUstanove.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPSNazivZupe.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPSSvojstvo.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPSDekret.setText(rs.getString("oslovljavanje"));
//
//                mPOPSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
//                mPOPSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);
                napuniListuOPastoralnojSluzbi(id);
                napuniListuODodatnojSluzbi(id);

//                mPOPIOMestoOsiguranika.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPIOSvojstvoOsiguranika.setSelectedItem(rs.getString("oslovljavanje"));
//                mPOPIOPocetakOsiguranjaOd.setDate(AsoftDate.EMPTY_DATE);
//                mPOPIOTrajanjeOsiguranjaDo.setDate(AsoftDate.EMPTY_DATE);
                napuniListuOPodaciOOsiguranju(id);

//                DefaultListModel listModel1 = (DefaultListModel) ListPodaciOPrijaviIOsiguranju.getModel();
//                listModel1.removeAllElements();
//            ListPodaciOPrijaviIOsiguranju.removeAll();
//                popioArray.clear();
            }
        } catch (ParseException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, ex, "Puni ekran", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void nuliranjeForme0() {

        List<String> listPtt = puniComboPtt.puni_ptt(conn);

        mSlika.setText(service.uzmiParametar.uzmiParametar(conn, "default_slika"));
        mDatumRodjenja.initPicker("mDatumRodj", null);
        mDatumPrestankaSluzbe.initPicker("mDatumPrestankaSluzbe1", null);
        mPOPSPocetakSluzbeOd.initPicker("mPocetakSluzbeOd", null);
        mPOPSTrajanjeSluzbeDo.initPicker("mTrajanjeSluzbeDo", null);

        mPODSPocetakSluzbeOd.initPicker("mPocetakDSluzbeOd", null);
        mPODSTrajanjeSluzbeDo.initPicker("mTrajanjeDSluzbeDo", null);

        mBogoslovijaMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mBogoslovijaPeriodOd.setText("");
        mBogoslovijaPeriodOd.setText("");

        mBogoslovijaMesto1.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mBogoslovijaPeriodOd1.setText("");
        mBogoslovijaPeriodDo1.setText("");

        mBogoslovijaMesto2.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mBogoslovijaPeriodOd2.setText("");
        mBogoslovijaPeriodDo2.setText("");

        mPrezbiteratMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mPrezbiteratDatum.initPicker("mPrezbiteratDatum", null);
        List<String> listZaredatelj = puniComboMaticni.puni_maticne(conn, "zaredatelj");

        mPrezbiteratZareditelj.setModel(new DefaultComboBoxModel(listZaredatelj.toArray()));

        mDjakonatMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mDjakonatDatum.initPicker("mDjakonatDatum", null);
        mDjakonatZareditelj.setModel(new DefaultComboBoxModel(listZaredatelj.toArray()));

        List<String> listUstanove = puniComboMaticni.puni_maticne(conn, "ustanove");
        List<String> listMestoSkolovanja = puniComboMaticni.puni_maticne(conn, "mesto_skolovanja");
        mDodiplomskiStudijMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mDodiplomskiStudijUstanova.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
        mDodiplomskiStudijPeriodOd.setText("");
        mDodiplomskiStudijPeriodDo.setText("");

        mMagisterijMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mMagisterijNazivUstanove.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
        mMagisterijPeriodOd.setText("");
        mMagisterijPeriodDo.setText("");

        mDoktoratMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mDoktoratNazivUstanove.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
        mDoktoratPeriodOd.setText("");
        mDoktoratPeriodDo.setText("");

        mSrednjeObrazovanjeMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        List<String> listSrednjeObrazovanjeSkolovanja = puniComboMaticni.puni_maticne(conn, "srednje_obrazovanje_skola");
        mSrednjeObrazovanjeSkola.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeSkolovanja.toArray()));

        mSrednjeObrazovanjePeriodOd.setText("");
        mSrednjeObrazovanjePeriodDo.setText("");

        mMestoRodjenja.setModel(new DefaultComboBoxModel(listPtt.toArray()));

        mPOPIOMestoOsiguranika.setModel(new DefaultComboBoxModel(listPtt.toArray()));

        List<String> listNacija = puniComboNacionalnost.puni_ptt(conn);
        mNacionalnost.setModel(new DefaultComboBoxModel(listNacija.toArray()));

        List<String> listDrzavljanstvo = puniComboDrzavljanstvo.puni_ptt(conn);
        mDrzavljanstvo.setModel(new DefaultComboBoxModel(listDrzavljanstvo.toArray()));

        List<String> listPodaciOPrijaviIOsiguranju = puniComboSvojstvoOsiguranika.puni_ptt(conn);
        mPOPIOSvojstvoOsiguranika.setModel(new DefaultComboBoxModel(listPodaciOPrijaviIOsiguranju.toArray()));

        List<String> listOpstine = puniComboMaticni.puni_maticne(conn, "opstina");
        mPOPIOOpstina.setModel(new DefaultComboBoxModel(listOpstine.toArray()));

        mPOPIOPocetakOsiguranjaOd.initPicker("mPocetakOsiguranjaOd", null);
        mPOPIOTrajanjeOsiguranjaDo.initPicker("mTrajanjeOsiguranjaDo", null);

        List<String> listOslovljavanje = puniComboMaticni.puni_maticne(conn, "oslovljavanje");
        mOslovljavanje.setModel(new DefaultComboBoxModel(listOslovljavanje.toArray()));

        List<String> listBanke = puniComboMaticni.puni_maticne(conn, "banke");
        mBanka.setModel(new DefaultComboBoxModel(listBanke.toArray()));

        List<String> listTipEntiteta = puniComboMaticni.puni_maticne(conn, "tip_entiteta");
        mTipEntiteta.setModel(new DefaultComboBoxModel(listTipEntiteta.toArray()));

        List<String> listCrkvenaTitula = puniComboMaticni.puni_maticne(conn, "crkvena_titula");
        mCrkvenaTitula.setModel(new DefaultComboBoxModel(listCrkvenaTitula.toArray()));

        List<String> listAkademskaTitula = puniComboMaticni.puni_maticne(conn, "akademska_titula");
        mAkademskaTitula.setModel(new DefaultComboBoxModel(listAkademskaTitula.toArray()));

        List<String> listSrednjeObrazovanjeMesto = puniComboMaticni.puni_maticne(conn, "ptt_brojevi");
        mSrednjeObrazovanjeMesto.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeMesto.toArray()));

//        List<String> listSrednjeObrazovanjeSkola = puniComboMaticni.puni_maticne(conn, "srednje_obrazovanje_skola");
//        mSrednjeObrazovanjeSkola.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeSkola.toArray()));
        // pastoralna sluzba
        List<String> listUstanove1 = puniComboMaticni.puni_maticne(conn, "ustanove");
        mPOPSNazivUstanove.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        mPODSNazivUstanove.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        mUstanovaNaziv.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        // interesantna stvar sve liste puni sadrzajem zadnje napunjene liste
        // ako ostavis u redu 3898 on ustanove napuni zupama ???
        List<String> listZupe = puniComboMaticni.puni_maticne(conn, "zupa");
        mPOPSNazivZupe.setModel(new DefaultComboBoxModel(listZupe.toArray()));
        mPODSNazivZupe.setModel(new DefaultComboBoxModel(listZupe.toArray()));
        mZupaNaziv.setModel(new DefaultComboBoxModel(listZupe.toArray()));
//        mUstanovaNaziv.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        List<String> listSvojstvoUSluzbi = puniComboMaticni.puni_maticne(conn, "svojstvo_u_sluzbi");
        mPOPSSvojstvo.setModel(new DefaultComboBoxModel(listSvojstvoUSluzbi.toArray()));
        List<String> listSluzbaUDodatnimSluzbama = puniComboMaticni.puni_maticne(conn, "dodatne_sluzbe");

        mPODSSvojstvo.setModel(new DefaultComboBoxModel(listSluzbaUDodatnimSluzbama.toArray()));
        mPOPSMestoSluzbe.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mPODSMestoSluzbe.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mPOPSNazivUstanove
        try {
            mDatumRodjenja.setDate(AsoftDate.EMPTY_DATE);
            mDatumPrestankaSluzbe.setDate(AsoftDate.EMPTY_DATE);
            mPrezbiteratDatum.setDate(AsoftDate.EMPTY_DATE);
            mDjakonatDatum.setDate(AsoftDate.EMPTY_DATE);
            mPOPIOPocetakOsiguranjaOd.setDate(AsoftDate.EMPTY_DATE);
            mPOPIOTrajanjeOsiguranjaDo.setDate(AsoftDate.EMPTY_DATE);
            mPOPSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
            mPOPSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);
            mPODSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
            mPODSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex);
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void ponovnoUcitavanjeComboa() {

        List<String> listPtt = puniComboPtt.puni_ptt(conn);

//        mSlika.setText(service.uzmiParametar.uzmiParametar(conn, "default_slika"));
//        mDatumRodjenja.initPicker("mDatumRodj", null);
//        mPOPSPocetakSluzbeOd.initPicker("mPocetakSluzbeOd", null);
//        mPOPSTrajanjeSluzbeDo.initPicker("mTrajanjeSluzbeDo", null);
//
//        mPODSPocetakSluzbeOd.initPicker("mPocetakDSluzbeOd", null);
//        mPODSTrajanjeSluzbeDo.initPicker("mTrajanjeDSluzbeDo", null);

        mBogoslovijaMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mBogoslovijaPeriodOd.setText("");
//        mBogoslovijaPeriodOd.setText("");

        mBogoslovijaMesto1.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mBogoslovijaPeriodOd1.setText("");
//        mBogoslovijaPeriodDo1.setText("");

        mBogoslovijaMesto2.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mBogoslovijaPeriodOd2.setText("");
//        mBogoslovijaPeriodDo2.setText("");

        mPrezbiteratMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mPrezbiteratDatum.initPicker("mPrezbiteratDatum", null);
        List<String> listZaredatelj = puniComboMaticni.puni_maticne(conn, "zaredatelj");

        mPrezbiteratZareditelj.setModel(new DefaultComboBoxModel(listZaredatelj.toArray()));

        mDjakonatMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mDjakonatDatum.initPicker("mDjakonatDatum", null);
        mDjakonatZareditelj.setModel(new DefaultComboBoxModel(listZaredatelj.toArray()));

        List<String> listUstanove = puniComboMaticni.puni_maticne(conn, "ustanove");
        List<String> listMestoSkolovanja = puniComboMaticni.puni_maticne(conn, "mesto_skolovanja");
        mDodiplomskiStudijMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mDodiplomskiStudijUstanova.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
//        mDodiplomskiStudijPeriodOd.setText("");
//        mDodiplomskiStudijPeriodDo.setText("");

        mMagisterijMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mMagisterijNazivUstanove.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
//        mMagisterijPeriodOd.setText("");
//        mMagisterijPeriodDo.setText("");

        mDoktoratMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mDoktoratNazivUstanove.setModel(new DefaultComboBoxModel(listMestoSkolovanja.toArray()));
//        mDoktoratPeriodOd.setText("");
//        mDoktoratPeriodDo.setText("");

        mSrednjeObrazovanjeMesto.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        List<String> listSrednjeObrazovanjeSkolovanja = puniComboMaticni.puni_maticne(conn, "srednje_obrazovanje_skola");
        mSrednjeObrazovanjeSkola.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeSkolovanja.toArray()));

//        mSrednjeObrazovanjePeriodOd.setText("");
//        mSrednjeObrazovanjePeriodDo.setText("");

        mMestoRodjenja.setModel(new DefaultComboBoxModel(listPtt.toArray()));

        mPOPIOMestoOsiguranika.setModel(new DefaultComboBoxModel(listPtt.toArray()));

        List<String> listNacija = puniComboNacionalnost.puni_ptt(conn);
        mNacionalnost.setModel(new DefaultComboBoxModel(listNacija.toArray()));

        List<String> listDrzavljanstvo = puniComboDrzavljanstvo.puni_ptt(conn);
        mDrzavljanstvo.setModel(new DefaultComboBoxModel(listDrzavljanstvo.toArray()));

        List<String> listPodaciOPrijaviIOsiguranju = puniComboSvojstvoOsiguranika.puni_ptt(conn);
        mPOPIOSvojstvoOsiguranika.setModel(new DefaultComboBoxModel(listPodaciOPrijaviIOsiguranju.toArray()));

        List<String> listOpstine = puniComboMaticni.puni_maticne(conn, "opstina");
        mPOPIOOpstina.setModel(new DefaultComboBoxModel(listOpstine.toArray()));

//        mPOPIOPocetakOsiguranjaOd.initPicker("mPocetakOsiguranjaOd", null);
//        mPOPIOTrajanjeOsiguranjaDo.initPicker("mTrajanjeOsiguranjaDo", null);

        List<String> listOslovljavanje = puniComboMaticni.puni_maticne(conn, "oslovljavanje");
        mOslovljavanje.setModel(new DefaultComboBoxModel(listOslovljavanje.toArray()));

        List<String> listBanke = puniComboMaticni.puni_maticne(conn, "banke");
        mBanka.setModel(new DefaultComboBoxModel(listBanke.toArray()));

        List<String> listTipEntiteta = puniComboMaticni.puni_maticne(conn, "tip_entiteta");
        mTipEntiteta.setModel(new DefaultComboBoxModel(listTipEntiteta.toArray()));

        List<String> listCrkvenaTitula = puniComboMaticni.puni_maticne(conn, "crkvena_titula");
        mCrkvenaTitula.setModel(new DefaultComboBoxModel(listCrkvenaTitula.toArray()));

        List<String> listAkademskaTitula = puniComboMaticni.puni_maticne(conn, "akademska_titula");
        mAkademskaTitula.setModel(new DefaultComboBoxModel(listAkademskaTitula.toArray()));

        List<String> listSrednjeObrazovanjeMesto = puniComboMaticni.puni_maticne(conn, "ptt_brojevi");
        mSrednjeObrazovanjeMesto.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeMesto.toArray()));

//        List<String> listSrednjeObrazovanjeSkola = puniComboMaticni.puni_maticne(conn, "srednje_obrazovanje_skola");
//        mSrednjeObrazovanjeSkola.setModel(new DefaultComboBoxModel(listSrednjeObrazovanjeSkola.toArray()));
        // pastoralna sluzba
        List<String> listUstanove1 = puniComboMaticni.puni_maticne(conn, "ustanove");
        mPOPSNazivUstanove.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        mPODSNazivUstanove.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        mUstanovaNaziv.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        // interesantna stvar sve liste puni sadrzajem zadnje napunjene liste
        // ako ostavis u redu 3898 on ustanove napuni zupama ???
        List<String> listZupe = puniComboMaticni.puni_maticne(conn, "zupa");
        mPOPSNazivZupe.setModel(new DefaultComboBoxModel(listZupe.toArray()));
        mPODSNazivZupe.setModel(new DefaultComboBoxModel(listZupe.toArray()));
        mZupaNaziv.setModel(new DefaultComboBoxModel(listZupe.toArray()));
//        mUstanovaNaziv.setModel(new DefaultComboBoxModel(listUstanove1.toArray()));
        List<String> listSvojstvoUSluzbi = puniComboMaticni.puni_maticne(conn, "svojstvo_u_sluzbi");
        mPOPSSvojstvo.setModel(new DefaultComboBoxModel(listSvojstvoUSluzbi.toArray()));
        List<String> listSluzbaUDodatnimSluzbama = puniComboMaticni.puni_maticne(conn, "dodatne_sluzbe");

        mPODSSvojstvo.setModel(new DefaultComboBoxModel(listSluzbaUDodatnimSluzbama.toArray()));
        mPOPSMestoSluzbe.setModel(new DefaultComboBoxModel(listPtt.toArray()));
        mPODSMestoSluzbe.setModel(new DefaultComboBoxModel(listPtt.toArray()));
//        mPOPSNazivUstanove
//        try {
//            mDatumRodjenja.setDate(AsoftDate.EMPTY_DATE);
//            mPrezbiteratDatum.setDate(AsoftDate.EMPTY_DATE);
//            mDjakonatDatum.setDate(AsoftDate.EMPTY_DATE);
//            mPOPIOPocetakOsiguranjaOd.setDate(AsoftDate.EMPTY_DATE);
//            mPOPIOTrajanjeOsiguranjaDo.setDate(AsoftDate.EMPTY_DATE);
//            mPOPSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
//            mPOPSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);
//            mPODSPocetakSluzbeOd.setDate(AsoftDate.EMPTY_DATE);
//            mPODSTrajanjeSluzbeDo.setDate(AsoftDate.EMPTY_DATE);
//        } catch (ParseException ex) {
//            JOptionPane.showMessageDialog(null, ex);
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }
    
    private void napuniListuOPodaciOOsiguranju(String id) {

//        PodaciOPrijaviIOsiguranju popio = new PodaciOPrijaviIOsiguranju();
        try {
            Statement stmt = conn.createStatement();
            String sqlQuery = " select * from podaci_o_prijavi_i_osiguranju where user_id like '" + id + "'" + " order by pocetak_od";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            System.out.println(sqlQuery);
            while (rs.next()) {
                PodaciOPrijaviIOsiguranju popio = new PodaciOPrijaviIOsiguranju();
                popio.setId(rs.getInt("id"));
                popio.setJmbg(rs.getString("jmbg"));
                popio.setMesto(rs.getString("mesto"));
                popio.setSvojstvoOsiguranika(rs.getString("svojstvo_osiguranika"));
                popio.setOpstina(rs.getString("opstina"));
                popio.setPocetakOd(rs.getDate("pocetak_od"));
                popio.setTrajanjeDo(rs.getDate("trajanje_do"));
                popio.setUserId(rs.getInt("user_id"));
                popio.setRbr(popioArray.size() + 1);

                mPOPIOMestoOsiguranika.setSelectedItem(rs.getString("mesto"));
                mPOPIOSvojstvoOsiguranika.setSelectedItem(rs.getString("svojstvo_osiguranika"));
                mPOPIOOpstina.setSelectedItem(rs.getString("opstina"));
                try {
                    mPOPIOPocetakOsiguranjaOd.setDate(rs.getDate("pocetak_od")); // AsoftDate.EMPTY_DATE);
                    mPOPIOTrajanjeOsiguranjaDo.setDate(rs.getDate("trajanje_do")); //AsoftDate.EMPTY_DATE);
                } catch (ParseException ex) {
                    Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
                }

                popioArray.add(popio);

            }

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
            try {
                conn.rollback();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
//          Logger.getLogger(putniNaloziZ.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

//        popio.setMesto(mPOPIOMestoOsiguranika.getSelectedItem().toString());
//        popio.setSvojstvoOsiguranika(mPOPIOSvojstvoOsiguranika.getSelectedItem().toString());
//
//        try {
//            popio.setPocetakOd(mPOPIOPocetakOsiguranjaOd.getSQLDate());
//            popio.setTrajanjeDo(mPOPIOTrajanjeOsiguranjaDo.getSQLDate());
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        popio.setRbr(popioArray.size() + 1);
//        popio.setJmbg(mJmbg.getText());
//
//        popioArray.add(popio);
        FillListPodaciOPrijaviIOsiguranju();

    }

    private void napuniListuOPastoralnojSluzbi(String id) {

//        PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
        try {
            Statement stmt = conn.createStatement();
            String sqlQuery = " select * from podaci_o_pastoralnoj_sluzbi where user_id like '" + id + "'" + "order by pocetak_sluzbe_od";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            System.out.println(sqlQuery);
            while (rs.next()) {
                PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
                pops.setId(rs.getInt("id"));
                pops.setJmbg(rs.getString("jmbg"));
                pops.setMestoSluzbe(rs.getString("mesto_sluzbe"));
                pops.setNazivUstanove(rs.getString("naziv_ustanove"));
                pops.setNazivZupe(rs.getString("naziv_zupe"));
                pops.setSvojstvo(rs.getString("svojstvo"));
                pops.setDekret(rs.getString("dekret"));
                pops.setPocetakSluzbeOd(rs.getDate("pocetak_sluzbe_od"));
                pops.setTrajanjeSluzbeDo(rs.getDate("trajanje_sluzbe_do"));
                pops.setUserId(rs.getInt("user_id"));
                pops.setRbr(popsArray.size() + 1);
                pops.setJmbg(mJmbg.getText());

                mPOPSMestoSluzbe.setSelectedItem(rs.getString("mesto_sluzbe"));
                mPOPSNazivUstanove.setSelectedItem(rs.getString("naziv_ustanove"));
                mPOPSNazivZupe.setSelectedItem(rs.getString("naziv_zupe"));
                mPOPSSvojstvo.setSelectedItem(rs.getString("svojstvo"));
                mPOPSDekret.setText(rs.getString("dekret"));

                try {
                    mPOPSPocetakSluzbeOd.setDate(rs.getDate("pocetak_sluzbe_od"));
                    mPOPSTrajanjeSluzbeDo.setDate(rs.getDate("trajanje_sluzbe_do"));  //(AsoftDate.EMPTY_DATE);
                } catch (ParseException ex) {
                    Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
                }

                popsArray.add(pops);
            }

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
            try {
                conn.rollback();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
//          Logger.getLogger(putniNaloziZ.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FillListPodaciOPastoralnojSluzbi();
    }

    private void napuniListuODodatnojSluzbi(String id) {

//        PodaciOPastoralnojSluzbi pops = new PodaciOPastoralnojSluzbi();
        try {
            Statement stmt = conn.createStatement();
            String sqlQuery = " select * from podaci_o_dodatnoj_sluzbi where user_id like '" + id + "'" + "order by pocetak_sluzbe_od";
            ResultSet rs = stmt.executeQuery(sqlQuery);
            System.out.println(sqlQuery);
            while (rs.next()) {
                PodaciODodatnojSluzbi pods = new PodaciODodatnojSluzbi();
                pods.setId(rs.getInt("id"));
                pods.setJmbg(rs.getString("jmbg"));
                pods.setMestoSluzbe(rs.getString("mesto_sluzbe"));
                pods.setNazivUstanove(rs.getString("naziv_ustanove"));
                pods.setNazivZupe(rs.getString("naziv_zupe"));
                pods.setSvojstvo(rs.getString("svojstvo"));
                pods.setDekret(rs.getString("dekret"));
                pods.setPocetakSluzbeOd(rs.getDate("pocetak_sluzbe_od"));
                pods.setTrajanjeSluzbeDo(rs.getDate("trajanje_sluzbe_do"));
                pods.setUserId(rs.getInt("user_id"));
                pods.setRbr(popsArray.size() + 1);
                pods.setJmbg(mJmbg.getText());

                mPODSMestoSluzbe.setSelectedItem(rs.getString("mesto_sluzbe"));
                mPODSNazivUstanove.setSelectedItem(rs.getString("naziv_ustanove"));
                mPODSNazivZupe.setSelectedItem(rs.getString("naziv_zupe"));
                mPODSSvojstvo.setSelectedItem(rs.getString("svojstvo"));
                mPODSDekret.setText(rs.getString("dekret"));

                try {
                    mPODSPocetakSluzbeOd.setDate(rs.getDate("pocetak_sluzbe_od"));
                    mPODSTrajanjeSluzbeDo.setDate(rs.getDate("trajanje_sluzbe_do"));  //(AsoftDate.EMPTY_DATE);
                } catch (ParseException ex) {
                    Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
                }

                podsArray.add(pods);
            }

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);
            try {
                conn.rollback();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
//          Logger.getLogger(putniNaloziZ.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FillListPodaciODodatnojSluzbi();
    }

    private void upisiZadnjuZupu(String text) throws SQLException {
//        asdf
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        java.util.Date sdf = null;
            	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        	Date date1 = null;
//                Date today = new Date(); 
//        try {
//            date1 = (Date) sdf.parse("1900-12-31");
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
//          sdf = u.getPocetakSluzbeOd();
        String mmZupa = "";
        String mZupaId = "";
        String mZupaSifra = "";
        boolean mfirst = true;
        for (PodaciOPastoralnojSluzbi u : popsArray) {
            if (mfirst) {
                date1=(Date) u.getPocetakSluzbeOd();
                mfirst=false;
            } 
            if(date1.compareTo(u.getPocetakSluzbeOd())<=0){
//            if (u.getPocetakSluzbeOd().after(sdf)) {
                mmZupa = u.getNazivZupe();
//                mZupaId = u.getNazivZupeId();
            }
        }
        
//        String mZupaId = "";
//        String mOslovljavanjeSifra = "";
                    String sqlQuery = " select id, sifra from zupa where naziv like '" + mmZupa
                    + "' and aktivan " ;

            Statement stmtosl = conn.createStatement();
            ResultSet rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mZupaId = rsosl.getString("id");
               mZupaSifra = rsosl.getString("sifra");
            }        
            
        String sqlQuery12 = "UPDATE `licni_podaci`SET  zupa_naziv = '" + mmZupa 
                + "', zupa_id = '"  + mZupaId 
                + "', zupa_sifra = '"  + mZupaSifra 
                + "' where id = '" + text + "'";


            Statement stmt2 = conn.createStatement();

            PreparedStatement ps = null;

            ps = conn.prepareStatement(sqlQuery12);


            //            ,
//                    Statement.RETURN_GENERATED_KEYS);
            ps.execute();


    }

        private void upisiZadnjuUstanovu(String text) throws SQLException {
//        asdf
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        java.util.Date sdf = null;
            	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        	Date date1 = null;
//                Date today = new Date(); 
//        try {
//            date1 = (Date) sdf.parse("1900-12-31");
//        } catch (ParseException ex) {
//            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
//        }
//          sdf = u.getPocetakSluzbeOd();
        String mmZupa = "";
        String mZupaId = "";
        String mZupaSifra = "";
        boolean mfirst = true;
        for (PodaciODodatnojSluzbi u : podsArray) {
            if (mfirst) {
                date1=(Date) u.getPocetakSluzbeOd();
                mfirst=false;
            } 
            if(date1.compareTo(u.getPocetakSluzbeOd())<=0){
//            if (u.getPocetakSluzbeOd().after(sdf)) {
                mmZupa = u.getNazivUstanove();
//                mZupaId = u.getNazivZupeId();
            }
        }
        
//        String mZupaId = "";
//        String mOslovljavanjeSifra = "";
                    String sqlQuery = " select id, sifra from ustanove where naziv like '" + mmZupa
                    + "' and aktivan " ;

            Statement stmtosl = conn.createStatement();
            ResultSet rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mZupaId = rsosl.getString("id");
               mZupaSifra = rsosl.getString("sifra");
            }        
            
        String sqlQuery12 = "UPDATE `licni_podaci`SET  ustanova_naziv = '" + mmZupa 
                + "', ustanova_id = '"  + mZupaId 
                + "', ustanova_sifra = '"  + mZupaSifra 
                + "' where id = '" + text + "'";


            Statement stmt2 = conn.createStatement();

            PreparedStatement ps = null;

            ps = conn.prepareStatement(sqlQuery12);


            //            ,
//                    Statement.RETURN_GENERATED_KEYS);
            ps.execute();


    }
    private void napuniIde(String text) throws SQLException {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (text.isEmpty() || text=="") {
            return;
        }
        String mOslovljavanjeId = "";
        String mOslovljavanjeSifra = "";
                    String sqlQuery = " select id, sifra from oslovljavanje where naziv like '" + mOslovljavanje.getSelectedItem().toString()
                    + "' and aktivan " ;

            Statement stmtosl = conn.createStatement();
            ResultSet rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mOslovljavanjeId = rsosl.getString("id");
               mOslovljavanjeSifra = rsosl.getString("sifra");
            }
            
        String mCrkvenaTitulaId = "";
        String mCrkvenaTitulaSifra = "";
                    sqlQuery = " select id, sifra from crkvena_titula where naziv like '" + mCrkvenaTitula.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mCrkvenaTitulaId = rsosl.getString("id");
               mCrkvenaTitulaSifra = rsosl.getString("sifra");
            }
    
        String mAkademskaTitulaId = "";
        String mAkademskaTitulaSifra = "";
                    sqlQuery = " select id, sifra from akademska_titula where naziv like '" + mAkademskaTitula.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mAkademskaTitulaId = rsosl.getString("id");
               mAkademskaTitulaSifra = rsosl.getString("sifra");
            }
            
        String mMestoRodjenjaId = "";
        String mMestoRodjenjaSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mMestoRodjenja.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mMestoRodjenjaId = rsosl.getString("id");
               mMestoRodjenjaSifra = rsosl.getString("sifra");
            }
            
        String mSrednjeObrazovanjeMestoId = "";
        String mSrednjeObrazovanjeMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mSrednjeObrazovanjeMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
               mSrednjeObrazovanjeMestoId = rsosl.getString("id");
              mSrednjeObrazovanjeMestoSifra = rsosl.getString("sifra");
            }
          
        String mBogoslovijaMestoId = "";
        String mBogoslovijaMestoSifra = "";
        String mBrProtokola="";
                    sqlQuery = " select id, sifra, drzava from ptt_brojevi where naziv like '" + mBogoslovijaMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mBogoslovijaMestoId = rsosl.getString("id");
              mBogoslovijaMestoSifra = rsosl.getString("sifra");
              mBrProtokola = rsosl.getString("drzava");
            }                  
            
        String mBogoslovijaMestoId1 = "";
        String mBogoslovijaMestoSifra1 = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mBogoslovijaMesto1.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mBogoslovijaMestoId1 = rsosl.getString("id");
              mBogoslovijaMestoSifra1 = rsosl.getString("sifra");
            }  
            
        String mBogoslovijaMestoId2 = "";
        String mBogoslovijaMestoSifra2 = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mBogoslovijaMesto2.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mBogoslovijaMestoId2 = rsosl.getString("id");
              mBogoslovijaMestoSifra2 = rsosl.getString("sifra");
            }  
            
        String mDjakonatMestoId = "";
        String mDjakonatMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mDjakonatMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mDjakonatMestoId = rsosl.getString("id");
              mDjakonatMestoSifra = rsosl.getString("sifra");
            }        
            
        String mDjakonatZarediteljId = "";
        String mDjakonatZarediteljSifra = "";
                    sqlQuery = " select id, sifra from zaredatelj where naziv like '" + mDjakonatZareditelj.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mDjakonatZarediteljId = rsosl.getString("id");
              mDjakonatZarediteljSifra = rsosl.getString("sifra");
            }  

        String mPrezbiteratMestoId = "";
        String mPrezbiteratMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mPrezbiteratMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mPrezbiteratMestoId = rsosl.getString("id");
              mPrezbiteratMestoSifra = rsosl.getString("sifra");
            }        
            
        String mPrezbiteratZarediteljId = "";
        String mPrezbiteratZarediteljSifra = "";
                    sqlQuery = " select id, sifra from zaredatelj where naziv like '" + mPrezbiteratZareditelj.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mPrezbiteratZarediteljId = rsosl.getString("id");
              mPrezbiteratZarediteljSifra = rsosl.getString("sifra");
            }  
            
        String mDodiplomskiStudijMestoId = "";
        String mDodiplomskiStudijMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mDodiplomskiStudijMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mDodiplomskiStudijMestoId = rsosl.getString("id");
              mDodiplomskiStudijMestoSifra = rsosl.getString("sifra");
            }       
            
        String mMagisterijMestoId = "";
        String mMagisterijMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mMagisterijMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mMagisterijMestoId = rsosl.getString("id");
              mMagisterijMestoSifra = rsosl.getString("sifra");
            } 
            
        String mDoktoratMestoId = "";
        String mDoktoratMestoSifra = "";
                    sqlQuery = " select id, sifra from ptt_brojevi where naziv like '" + mDoktoratMesto.getSelectedItem().toString()
                    + "' and aktivan " ;

            stmtosl = conn.createStatement();
            rsosl = stmtosl.executeQuery(sqlQuery);

            while (rsosl.next()) {
              mDoktoratMestoId = rsosl.getString("id");
              mDoktoratMestoSifra = rsosl.getString("sifra");
            } 
            
            
         String sqlQuery12 = "UPDATE `licni_podaci`SET  oslovljavanje_id = '" + mOslovljavanjeId 
                 + "', oslovljavanje_sifra = '" + mOslovljavanjeSifra 
                 + "', crkvena_titula_id = '" + mCrkvenaTitulaId
                 + "', crkvena_titula_sifra = '" + mCrkvenaTitulaSifra
                 + "', akademska_titula_id = '" + mAkademskaTitulaId
                 + "', akademska_titula_sifra = '" + mAkademskaTitulaSifra      
                 + "', mesto_rodjenja_id = '" + mMestoRodjenjaId
                 + "', mesto_rodjenja_sifra = '" + mMestoRodjenjaSifra    
                 + "', srednje_obrazovanje_mesto_id = '" + mSrednjeObrazovanjeMestoId
                 + "', srednje_obrazovanje_mesto_sifra = '" + mSrednjeObrazovanjeMestoSifra    
                 + "', bogoslovija_mesto_id = '" + mBogoslovijaMestoId
                 + "', bogoslovija_mesto_sifra = '" + mBogoslovijaMestoSifra 
                 + "', brprotokola = '" + mBrProtokola 
                 + "', bogoslovija_mesto1_id = '" + mBogoslovijaMestoId1
                 + "', bogoslovija_mesto1_sifra = '" + mBogoslovijaMestoSifra1 
                 + "', bogoslovija_mesto2_id = '" + mBogoslovijaMestoId2
                 + "', bogoslovija_mesto2_sifra = '" + mBogoslovijaMestoSifra2   
                 + "', djakonat_mesto_id = '" + mDjakonatMestoId
                 + "', djakonat_mesto_sifra = '" + mDjakonatMestoSifra     
                 + "', djakonat_zareditelj_id = '" + mDjakonatZarediteljId
                 + "', djakonat_zareditelj_sifra = '" + mDjakonatZarediteljSifra   

                 + "', prezbiterat_mesto_id = '" + mPrezbiteratMestoId
                 + "', prezbiterat_mesto_sifra = '" + mPrezbiteratMestoSifra     
                 + "', prezbiterat_zareditelj_id = '" + mDjakonatZarediteljId
                 + "', prezbiterat_zareditelj_sifra = '" + mDjakonatZarediteljSifra     
 
                 + "', dodiplomski_studij_mesto_id = '" + mDodiplomskiStudijMestoId
                 + "', dodiplomski_studij_mesto_sifra = '" + mDodiplomskiStudijMestoSifra  
                 
                 + "', magisterij_mesto_id = '" + mMagisterijMestoId
                 + "', magisterij_mesto_sifra = '" + mMagisterijMestoSifra                  

                 + "', doktorat_mesto_id = '" + mDoktoratMestoId
                 + "', doktorat_mesto_sifra = '" + mDoktoratMestoSifra                 
                 
                 + "' where id = '" + text + "'";
        System.out.println(sqlQuery12);
        try {
            Statement stmt2 = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
            PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(sqlQuery12);
        } catch (SQLException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            //            ,
//                    Statement.RETURN_GENERATED_KEYS);
            ps.execute();
        } catch (SQLException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
        }           
        
    }

    private void upisiZaKraj() {
                        try {
            upisiZadnjuZupu(mId.getText());
            upisiZadnjuUstanovu(mId.getText());
            napuniIde(mId.getText());
        } catch (SQLException ex) {
            Logger.getLogger(addPersonalTab.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex);
        }
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
